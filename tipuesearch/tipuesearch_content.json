{"pages":[{"title":"UDOO X86 Docs","text":"","tags":"","url":"index.html"},{"title":"Introduction","text":"UDOO X86 UDOO X86 is the New PC: the most powerful maker board ever and an Arduino\u2122 101-compatible platform, all embedded on the same board. On UDOO X86 you can run all the software available for the PC world, from gaming to video streaming, from graphical editors to professional development platforms, plus all the software for the Arduino\u2122 101 world, including all the sketches, libraries and the official Arduino\u2122 101 IDE. UDOO X86 embeds two processors made by Intel\u00ae: a Quad Core 64-bit new-generation x86 Braswell 14nm processors, designed for the PC domain (The N-Series Intel\u00ae Pentium\u00ae \/ Celeron\u00ae and x5-Series Atom family of System-on-Chips (SoCs) formerly coded as Braswell is a series of Quad Core SoCs with 64-bit instruction set and very low TDP). the Intel\u00ae Curie\u2122 module, the same of Arduino\u2122 101, designed for wearables. While the X86 Braswell processor can run all the Windows, Linux, Android X86 64bit Distros you want to use as desktop PC, the Intel\u00ae Curie\u2122 allows easy access to a Arduino\u2122 101 environment. Download the User Manual to have more complete explanation of the UDOO X86 hardware. Visit the Get Started X86 section of the UDOO website to find video tutorials of how to start use the UDOO X86 board. This is the documentation for the first revision of the UDOO X86 board with Arduino 101-compatible microcontroller with Intel&reg; Curie. A new revision of the UDOO X86 board has been released. If you have the UDOO X86 II revision in your hands, please consult the UDOO X86 II doc at this page. Check how to recognize the UDOO X86 revision. Heads up! In order to prevent damages to your board, remember to: Never provide more than 3.3V in input to the GPIOs of the Arduino 101(Intel\u00ae Curie\u2122), and never provide more than 1.8V in input to the GPIOs of the Braswell processor. Never keep the board in touch with metal objects or surfaces while it is powered up Power the board with a stabilized power supply (DC-jack with a standard 5.5mm\/2.1mm barrel jack, internal positive, Voltage 12V \u00b1 5%, at least 3A). Do not use a NON-standard USB 3.0 peripheral. If you use a non-standard USB 3.0 peripheral with an external power plug, this could send back the power source to the UDOO X86 board with the risk of damage. Lineup UDOO X86 retail line up consists of two models. Technical specifications Processor: CPU Intel\u00ae Pentium N3710 up to 2.56 Ghz (ULTRA version) CPU Intel\u00ae Celeron N3160 up to 2.24 Ghz (ADVANCED PLUS) GPU: Intel\u00ae HD Graphics 405 up to 700 MHz 16 execution units (ULTRA version) Intel\u00ae HD Graphics 400 up to 640 MHz 12 execution units (ADVANCED PLUS) RAM: 8 GB DDR3L Dual Channel (ULTRA version) 4 GB DDR3L Dual Channel (ADVANCED PLUS) Intel\u00ae Curie\u2122 module (Quark SE core 32 MHz plus 32-bit ARC core 32 MHz) features Bluetooth LE, 6-axis accelerometer\/gyro Video interfaces: 1x HDMI 1.4 (CEC) 2x Mini DisplayPort ++ (mDP++) Storage: 32GB eMMC soldered on-board (Advanced Plus and Ultra only) 1x M.2 Key B 2260 slot for SATA SSD modules** \/ PCIe (2x) modules 1x SATA III 6Gb\/s connector 1x MicroSD slot Networking: 1x Gigabit Ethernet LAN interface 1x M.2 Key E slot for optional Wireless(WiFi+BT) Module Audio interfaces: HD Audio Codec ALC283CG Microphone + Headphone Combo Connector (TRRS) Pre-amplified stereo speaker output S\/PDIF output* 3x USB 3.0 type-A sockets 2x HSUART ports* 2x I2C interface* 1x SDIO interface* 1x LPC interface* 12V (\u00b1 5%) DC Power Jack (standard 5.5mm\/2.1mm barrel jack: internal positive), at least 3A. RTC Battery Connector + RTC Coin Battery Bi-color Power Status LED 1x Sensor Snap-In I2C connector (UDOO Bricks) Arduino\u2122 101-Compatible through the standard Arduino\u2122 Pins layout and compatible with Arduino\u2122 shields. *Available on Pin Header **Not compatible with NVMe modules Visit the official accessories sections. Community Official web site www.udoo.org Official forum www.udoo.org\/forum Forums The official UDOO forums can be found at www.udoo.org\/forum The forum search facility has been tweaked to allow more general searching. Please do a search before making a post as the issue may already have been raised and answered. IRC channel There is an (unofficial) UDOO discussion channel on IRC. Using the IRC client of your choice, use server information: irc.freenode.net. Room name is #udoo. Social networks Facebook fan page Twitter Google+ YouTube","tags":"","url":"Introduction\/Introduction.html"},{"title":"Find IP Address","text":"Overview We\u2019ll find out how to discover the IP address associated with your UDOO X86. The IP address is a number that uniquely identifies a device in a network. It will be useful to know which IP your UDOO X86 is assigned to for connecting to it remotely. There are various way to find the private IP Address, so let\u2019s get started. First method: Command Line If your UDOO X86 is connected to a screen, you can simply find the IP Address of the board using the tool exploited by the OS you are using. Linux Windows On a Linux distribution open a terminal and type: ip a This command will output informations related to both Ethernet and Wi-Fi status, including respective IP addresses, besides the loopback address. udooer@udoox86:~$ ip a 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link\/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1\/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1\/128 scope host valid_lft forever preferred_lft forever 2: enp2s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link\/ether 00:c0:08:8a:9b:e4 brd ff:ff:ff:ff:ff:ff inet 192.168.1.154\/24 brd 192.168.1.255 scope global dynamic enp2s0 valid_lft 86360sec preferred_lft 86360sec inet6 fe80::9729:431c:c4af:1d63\/64 scope link valid_lft forever preferred_lft forever 3: wlp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000 link\/ether ac:2b:6e:12:b5:6a brd ff:ff:ff:ff:ff:ff inet 192.168.1.102\/24 brd 192.168.1.255 scope global dynamic wlp3s0 valid_lft 86396sec preferred_lft 86396sec inet6 fe80::2067:7675:6f56:518\/64 scope link tentative dadfailed valid_lft forever preferred_lft forever inet6 fe80::29a4:2ccc:f12c:2e4a\/64 scope link tentative dadfailed valid_lft forever preferred_lft forever inet6 fe80::9846:e568:c6d2:ff08\/64 scope link tentative dadfailed valid_lft forever preferred_lft forever In this example the Ethernet IP address is 192.168.1.154 and the Wi-Fi IP address is 192.168.1.102. Alternatively you can also use the command ifconfig. A quick way to find your IP address in Windows is by running the ipconfig command in a Command Prompt window. You\u2019ll see your IP address in the IPv4 Address row beneath the name of your connection. Using Windows 10 you can right-click the Start button. In the Menu appeared click on Command Prompt. Second method: use the Fing - Network Tools Mobile App Fing is a network scanner app, which will help you to discover every device connected into your network. Simply go to the Android or Ios market, download and launch it. If UDOO X86 is properly connected to the same network your phone is (whether via Wi-Fi or ethernet), you should see it and discover its IP address. Link to the stores: Android Google Play and IOS App Store You'll find UDOO X86 connected through the GB Ethernet identified as Seco. If the board is connected to the Network through Intel Wi-Fi\/BT module you'll find it identified as Intel Third method: use your Router\u2019s control panel Just connect to your router\u2019s control panel: open your browser and type the IP address of your router. Usually this is 192.168.1.1 or 192.168.0.1 or 192.168.1.254. Once you\u2019re prompted with a user and password login box, log in (if you\u2019ve not changed them, there are good chances they would be: admin as both user and password). Navigate to the devices list, which can be called also status or manteinance, you should see your UDOO X86 with his IP address. Here you are. Now that you know your IP address, you can easily access your UDOO X86.","tags":"","url":"Basic_Setup\/Find_IP_Address.html"},{"title":"Remote Terminal (SSH)","text":"You can use UDOO X86 as a Desktop PC, connected up to 3 4K resolution monitor, keyboard and mouse. This is probably the most used setup, but if you want you can communicate with the board in remote way, so long as you leaving the board connected to a network. Requirements A first condition to establish a SSH connection with your UDOO X86 is to have previously completed the tutorial about Find IP Address. A second condition is to install a SSH Server on your UDOO X86 system, and install an SSH Client on the PC from which you want to connect to UDOO X86. SSH Server on UDOO X86 Choose the software for the OS you've installed on your UDOO X86. Linux Windows On a Linux system we suggest to use OpenSSH Server. On Ubuntu\/Debian\/Linux Mint type the following command: $ sudo apt install openssh-server N.B: On Ubuntu you usually find the openssh-server already installed out of the box. On RHEL\/Centos\/Fedora type the following command: # yum -y install openssh-server On ArchLinux type the following command: # pacman -S openssh You can change some OpenSSH server configuration in the file \/etc\/ssh\/sshd_config. make a copy of the original sshd configuration file first. sudo cp \/etc\/ssh\/sshd_config \/etc\/ssh\/sshd_config.backup sudo gedit \/etc\/ssh\/sshd_config Heads up! Take note of your Linux username and password. These will be required during the connection from the client. If you want to use another SSH Server different from OpenSSh, you can find a comparison of SSH Server here. On Windows you usually won't use the SSH connection to access a terminal, so we suggest to follow the docs on the next page to use a complete Remote Desktop (VNC) connection. SSH Client on the remote PC On the PC from which you want to connect to UDOO X86 choose the client for the OS you use. Linux Windows On a Linux system we suggest to use OpenSSH Client. On Ubuntu\/Debian\/Linux Mint type the following command: $ sudo apt install openssh-client N.B: On Ubuntu you usually find the openssh-server already installed out of the box. On RHEL\/Centos\/Fedora type the following command: # yum -y install openssh-clients On ArchLinux type the following command: # pacman -S openssh There are lots of valid SSH clients for Windows. We suggest to use MobaXterm, a complete enhanced terminal for Windows with X11 server, tabbed SSH client, network tools and much more. Another famous SSH client is PuTTY. Connection via SSH Once you have completed these steps, open your SSH client. For the sake of this example, we consider you're using PuTTY on Windows. Opening PuTTY a window will ask you to specify the destination you want to connect to. In the first blank space, named Host Name or IP address, type the IP Address of UDOO X86. Eventually, a Windows Firewall popup could appear the first time you do this. If this happens, allow PuTTY to bypass the firewall. When the connection succeeds, a black window will appear. That is the terminal. It will ask you to enter your login credential. Type the name of the user , then press &quot;Enter&quot;. A new line will appear: &lt;username&gt;@&lt;IPAddres&gt;'s password: Type the password of the username then press &quot;Enter&quot;. Heads up! Do not worry if you don't see what you type in the terminal: it's an expedient to hide your password to eventual onlookers. At this point you can use your terminal: Welcome to Ubuntu 16.04.3 LTS (GNU\/Linux 4.4.0-59-generic x86_64) * Documentation: https:\/\/help.ubuntu.com * Management: https:\/\/landscape.canonical.com * Support: https:\/\/ubuntu.com\/advantage 90 packages can be updated. 40 updates are security updates. Last login: Mon Jan 30 16:48:52 2017 udooer@UDOOX86RevF:~$ Good job, mate: you are now connected to your UDOO Neo via SSH.","tags":"","url":"Basic_Setup\/Remote_Terminal_(SSH).html"},{"title":"Remote Desktop (VNC)","text":"You can use UDOO X86 as a Desktop PC, connected up to 3 4K resolution monitor, keyboard and mouse. This is probably the most used setup, but if you want you can communicate with the board in remote way, so long as you leaving the board connected to a network. Virtual Network Computing (VNC) is a graphical desktop sharing system that uses the Remote Frame Buffer protocol (RFB) to remotely control another computer. Basically VNC allows you to use your keyboard and mouse of your PC to interact with the graphical desktop environment of the UDOO X86 from remote. Requirements A first condition to establish a VNC connection with your UDOO X86 is to have previously completed the tutorial about Find IP Address. A second condition is to install a VNC Server on your UDOO X86 system, and install an VNC Client on the PC from which you want to connect to UDOO X86. VNC Server (on UDOO X86) A VNC server is a program that shares a desktop with other computers over the Internet. Choose the software for the OS you've installed on your UDOO X86. Linux Windows On Linux you usually need to install a VNC Server. There are various alternatives. For example you can install one of these through the package manager of your Linux Distro or downloading from the official websites: x11vnc tightvncserver tigervnc realvnc Some distros comes with a functional preinstalled VNC Server, so you can check if the distro are you using already has a desktop sharing software. For example Vino is the default VNC server in Ubuntu to share your existing UDOO X86 desktop. Follow the instruction in the link to enable the desktop sharing feature. At this page you can find a list of the most common VNC Servers used in Ubuntu: Ubuntu VNC\/Servers. If you come across an encryption Vino error trying connecting follow this page. Vnc Vino Ubuntu Security fix Windows 10 comes with a Remote Desktop Server already installed. The PC must be running Windows 10 Pro\/Education\/Enterprise. If you Windows 10 version is the Home you can not access it remotely. You need to turn on the Remote Desktop feature on the UDOO X86 in this way: Right-Click the Start button and go to System In the Left Menu click on Remote settings Check the Allow remote connections to this computer radio button. For a higher level of security, check the Allow connections only from computers running Remote Desktop with Network Level Authentication(recommended) Click Apply and OK Now the Remote Desktop service is enabled an ready to accept remote connections. You can find other infos here. VNC Client on the remote PC Now you need to install a VNC Client on the PC from which you want to connect to UDOO X86. Linux Windows There also are lots of valid VNC clients for Linux. For example, VNC Viewer, VNC\u00ae Viewer for Google Chrome\u2122, TightVNC, TigerVNC. Choose the one you prefer and install it in the remote PC. Windows 10 comes with a VNC Client already installed. In the search box of the Windows taskbar, type Remote Desktop Connection to find it. In the Computer box you can use the IP Address or the Computer Name assigned to your UDOO X86. We suggest to use IP Address. There also are lots of valid VNC clients for Windows. For example, MobaXterm, a complete enhanced terminal for Windows with X11 server, tabbed vnc client, network tools and much more. Other alternatives could be VNC Viewer, VNC\u00ae Viewer for Google Chrome\u2122, TightVNC, TigerVNC. Connection via VNC Regardless of the system and software you are using all the VNC client will ask you to insert the IP Address of the UDOO X86 to connect with it. After the connection is established you will need to insert the credential, username and the password, of the user configured in the UDOO X86 Operating System.","tags":"","url":"Basic_Setup\/Remote_Desktop_(VNC).html"},{"title":"Linux","text":"UDOO X86 is a Single Board Computer based on the N-Series Intel\u00ae Pentium\u00ae \/ Celeron\u00ae and x5-Series Atom family of System-on-Chips (SoCs) formerly coded as Braswell, a series of Quad Core SoCs with 64-bit instruction set and very low TDP. Thanks to the x86_64 instruction set, the UDOO X86 supports all the x86 Linux distribution for 32-bit(aka i386, IA-32, x86-32, x86_32) and 64-bit(aka x64, x86-64, x86_64). We suggest to always use a 64-bit OS version. Heads up! Please notice that total amount of 8GB of RAM of the UDOO X86 ULTRA version would be usable with 64-bit OS. Total amount of memory available with a 32-bit OS depends on the OS itself (usually less than 4GB unless the OS isn't using PAE). In the Getting Started section you can find a guide of how to install a Linux distro, the example is based on the Ubuntu OS. In order to download the latest updated versions of the Intel\u00ae Graphics HD drivers you can download and run the Intel\u00ae Graphics update tool for Linux. Heads up! The processors of the UDOO X86 and the Wi-Fi\/BT module are released only few time ago so we suggest to use a recent distribution to find all the latest drivers already installed and have all the devices operating properly. Famous Linux distributions Here you can find an unordered list of 10 of the most popular Linux distributions: Ubuntu: is probably the most well-known Linux distribution. Ubuntu is based on Debian, but it has its own software repositories. Much of the software in these repositories is synced from Debian\u2019s repositories. Ubuntu 18.10 Cosmic Cuttlefish is the latest Ubuntu released version. Ubuntu 18.04 LTS Bionic Beaver is the latest Long Term Support version with a support end of life on April 2023. Linux Mint is a Linux distribution built on top of Ubuntu. It uses Ubuntu\u2019s software repositories, so the same packages are available on both. Originally, Mint was an alternative distribution loved mainly because it included media codecs and proprietary software that Ubuntu didn\u2019t include by default. Debian is an operating system composed only of free, open-source software. The Debian project has been operating since 1993 \u2014 over 20 years ago! This widely respected project is still releasing new versions of Debian, but it\u2019s known for moving much more slowly than distributions like Ubuntu or Linux Mint. This can make it more stable and conservative, which is ideal for some systems. Arch Linux is more old school than many of the other Linux distributions here. It\u2019s designed to be flexible, lightweight, minimal, and to \u201cKeep it Simple.\u201d Keeping it simple doesn\u2019t mean Arch provides tons of graphical utilities and automatic configuration scripts to help you set up your system. Instead, it means Arch dispenses with that stuff and gets out of your way. Fedora is a project with a strong focus on free software \u2014 you won\u2019t find an easy way to install proprietary graphics drivers here, although third-party repositories are available. Fedora is bleeding edge and contains the latest versions of software. CentOS \/ Red Hat Enterprise Linux Red Hat Enterprise Linux is a commercial Linux distribution intended for servers and workstations. It\u2019s based on the open-source Fedora project, but is designed to be a stable platform with long-term support. CentOS and Red Hat recently announced they\u2019re collaborating, so CentOS is now part of Red Hat itself. openSUSE \/ SUSE Linux Enterprise openSUSE is a community-created Linux distribution sponsored by Novell. Novell purchased SuSE Linux in 2003, and they still create an enterprise Linux project known as SUSE Linux Enterprise. Where Red Hat has the Fedora project that feeds into Red Hat Enterprise Linux, Novell has the openSUSE project that feeds into SUSE Linux Enterprise. Mageia \/ Mandriva Mageia is a fork of Mandriva Linux created in 2011. Mandriva \u2014 known as Mandrake before that \u2014 was once one of the great user-friendly Linux distributions. Slackware Linux is another institution. Founded in 1993, Slackware is the oldest Linux distribution that\u2019s still maintained and putting out new releases today. Puppy Linux is another fairly well-known Linux distribution. Previous versions have been built on Ubuntu, but the latest is built on Slackware. Puppy is designed to be a small, lightweight operating system that can run well on very old computers. Others useful distributions: LibreELEC \u2013 Just enough OS for KODI Kodi is a free and open-source media player software application developed by the XBMC Foundation. LibreELEC (short for Libre Embedded Linux Entertainment Center) is a distro based on Kodi, is a non-profit fork of OpenELEC as an open source just enough OS (JeOS) Linux software appliance distro for Kodi. Go to the LibreELEC with CEC and IR support page to download a dedicated version of LibreELEC 9.0 with Linux kernel 4.19RC8 and support for UDOO X86 CEC and IR support. Lakka is a lightweight Linux distribution that transforms a computer into a full blown game console for retrogaming. source www.howtogeek.com To help choosing your favorite distro you can also check this linux.org article. A very updated resource to watch &quot;which is the most used Linux Distro&quot; and to choose one is Distro Watch","tags":"","url":"Operating_Systems\/Linux.html"},{"title":"Windows","text":"UDOO X86 is a Single Board Computer based on the N-Series Intel\u00ae Pentium\u00ae \/ Celeron\u00ae and x5-Series Atom family of System-on-Chips (SoCs) formerly coded as Braswell, a series of Quad Core SoCs with 64-bit instruction set and very low TDP. Thanks to the x86_64 instruction set, the UDOO X86 supports the Windows distribution for 32-bit(aka i386, IA-32, x86-32, x86_32) and 64-bit(aka x64, x86-64, x86_64). We suggest to always use a 64-bit Windows version. Heads up! Please notice that total amount of 8GB of RAM of the UDOO X86 ULTRA version would be usable only with 64-bit OS. Total amount of memory available with a 32-bit OS depends on the OS itself (less than 4GB, however). The supported version of Windows are: Microsoft\u00ae Windows\u00ae 7 (32\/64 bit) Microsoft\u00ae Windows\u00ae 8.1 (32\/64 bit) Microsoft\u00ae Windows\u00ae 10 (32\/64 bit) Microsoft\u00ae Windows\u00ae Embedded Standard 7 \/8 (32\/64 bit) In the Getting Started section you can find a guide of how to install Windows, the example is based on Windows\u00ae 10 64-bit. The procedure to install a Windows\u00ae 7 version is a little different so read the dedicated section on the bottom of this page. Heads up! The Braswell Processors of the UDOO X86 and the Wi-Fi\/BT Intel\u00ae AC3168 module are released only few time ago so we suggest to use Windows\u00ae 10 64-bit to find all the latest drivers already installed and have all the devices operating properly. Heads up! If you have issues with the TRRS microphone in Windows\u00ae 10 try to install the Realtek High Definition Audio Codecs audio drivers from this page In order to download the latest updated versions of the Intel\u00ae devices drivers (e.g. Graphics HD drivers, chipset, wireless networking) we suggest to download and run the Intel\u00ae Driver &amp; Support Assistant for Windows\u00ae. Windows\u00ae 7 Installation Please be aware that Windows\u00ae 7 OS doesn\u2019t have native support for the xHCI controller for USB 3.0 port. It will be supported only after installing chipset\u2019s driver. This could lead to problems during OS installation, since during this phase USB keyboard and mouse will not work, if connected to any of the USB ports available on UDOO x86 board. It is possible to force the Windows\u00ae 7 Support for Keyboard and Mouse on USB ports by entering UEFI Setup utility(SCU) before performing Windows\u00ae 7 and chipset\u2019s driver installation. You can find the Win7 Keyboard\/Mouse Support option in the menu Advanced, sub menu Other Configuration: Advanced ... Other Configuration ... Win7 Keyboard\/Mouse Support &lt;Enabled&gt; Heads up! Windows 7 does not include any driver support for eMMC devices so installation in this storage device is not supported by this OS.","tags":"","url":"Operating_Systems\/Windows.html"},{"title":"Android","text":"UDOO X86 is a Single Board Computer based on the N-Series Intel\u00ae Pentium\u00ae \/ Celeron\u00ae and x5-Series Atom family of System-on-Chips (SoCs) formerly coded as Braswell, a series of Quad Core SoCs with 64-bit instruction set and very low TDP. Thanks to the x86_64 instruction set, the UDOO X86 supports all the x86 Android distribution for 32-bit(aka i386, IA-32, x86-32, x86_32) and 64-bit(aka x64, x86-64, x86_64). We suggest to always use a 64-bit OS version. BlissOS - BlissOS X86 Rom for UDOO X86 This is a really useful Open-Source Android ROM for x86 based on the AOSP. Bliss x86 - For PC's and Laptops This is a newer spin on Bliss for your x86 PC's, Laptops, Tablets and x86 maker boards. Devices: Compatible with the growing number of Intel x86 CPU's This includes some AMD and Nvidia CPU's (MBR and UEFI Compatible) Bliss-x86 is for PC project, will have a few PC centric extras added in to help with application compatibility, mouse integration, keyboard shortcuts, tc. And the creators have added a few little Linux throwbacks like bash and busybox commands, integrated Terminal and much more. You can also find some additional features pre-installed like Root permission (SuperSu), Houdini application compatibility (to run ARM application), TaskBar launcher for a Desktop experience, in addition to the Pico version of OpenGapps. Installation Heads up! This is not developed by the UDOO Team so it is not official and supported directly. You can download the official BlissRom builds for UDOO X86 in official the download page. To prepare a bootable USB with the installer you can follow the UDOO Getting Started guide or check the official BlissRom documentation. On the UDOO youtube channel you can find an installation video-guide of how to install Android Bliss-x86 on an empty drive (e.g. eMMC) of the UDOO X86. Android Installation on UDOO X86. Heads up! If during the all installation procedure you'll experience any problem with wireless mouse or keyboard, just remember to use a USB cabled mouse or keyboard instead. Heads up! When you boot Android Bliss-x86 for the first time (first boot takes some minutes) the Google SetupWizard App will start automatically, like what append in a brand new Android phone. SetupWizard will crash if your device doesn't have working wifi module. If you have this issue, please add SETUPWIZARD=0 to your grub command in order to skip it. To do this you have to stop the boot at grub and press e to temporarily modify the standard boot command in this way: setparams `Android-x86 ...` search --set=root --file \/android-... linux ... androidboot.selinux=permessive SETUPWIZARD=0 buildvariant=eng initrd \/android-... Android-x86 Project - Run Android 8.1 on Your UDOO X86 From the official android-x86.org website: This is a project to port Android open source project to x86 platform, formerly known as &quot;patch hosting for android x86 support&quot;. The original plan is to host different patches for android x86 support from open source community. A few months after we created the project, we found out that we could do much more than just hosting patches. So we decide to create our code base to provide support on different x86 platforms, and set up a git server to host it. The last build of Android-x86 is based on Android 8.1 Oreo. Installation You can download the file android-x86_64-8.1-rc1.iso from the official downaload page. This is tested and perfectly working on UDOO X86. To prepare a bootable USB with the installer you can follow the UDOO Getting Started guide, or the official android-x86 documentation. Heads up! If after a complete installation Android-x86 doesn't boot properly, we suggest to prepare the partition where you want to install the OS formatting it in ext4 and do not format again the partition during the Android-x86 wizard installation. This is a known issue, we found this solution in different articles, like this one, for example. Remix OS for PC Another one of the most famous Android projects for x86 is Remix OS. From the official remixos website. Remix OS from Jide is a reimagination of Android that provides a desktop-like windowed environment, powered by Android, to grant the benefits of the mobile OS with productivity characteristics of a desktop operating system such as a taskbar, true multi-tasking, and more. It's currently available on hardware made by Jide, such as the Remix Mini, but is also available as a bootable operating system for X86 devices. Installation You can download the iso Remix_OS_for_PC_Android_64bit from the official download page. This is tested and perfectly working on UDOO X86. To prepare a bootable USB with the installer you can follow the UDOO Getting Started guide, or the official RemixOS video-guide for Windows users.","tags":"","url":"Operating_Systems\/Android.html"},{"title":"Yocto","text":"What is Yocto The Yocto Project is a Linux Foundation workgroup whose goal is to produce tools and processes that will enable the creation of Linux distributions for embedded software that are independent of the underlying architecture of the embedded software itself. The project was announced by the Linux Foundation in 2010. In March 2011, the project aligned itself with OpenEmbedded, an existing framework with similar goals, with the result being The OpenEmbedded-Core Project. The Yocto Project is an open source project whose focus is on improving the software development process for embedded Linux distributions. The Yocto Project provides interoperable tools, metadata, and processes that enable the rapid, repeatable development of Linux-based embedded systems. Project Scope The Yocto Project has the aim and objective of attempting to improve the lives of developers of customised Linux systems supporting the ARM, MIPS, PowerPC and x86\/x86 64 architectures. A key part of this is an open source build system, based around the OpenEmbedded architecture, that enables developers to create their own Linux distribution specific to their environment. This reference implementation of OpenEmbedded is called Poky. There are several other sub-projects under the project umbrella which include EGLIBC, pseudo, cross-prelink, Eclipse integration, ADT\/SDK, the matchbox suite of applications, and many others. One of the central goals of the project is interoperability among these tools. The project offers different sized targets from &quot;tiny&quot; to fully featured images which are configurable and customizable by the end user. The project encourages interaction with upstream projects and has contributed heavily to OpenEmbedded-Core and BitBake as well as to numerous upstream projects, including the Linux kernel.[citation needed] The resulting images are typically useful in systems where embedded Linux would be used, these being single-use focused systems or systems without the usual screens\/input devices associated with desktop Linux systems. As well as building Linux systems, there is also an ability to generate a toolchain for cross compilation and a software development kit (SDK) tailored to their own distribution, also referred to as the Application Developer Toolkit (ADT). The project tries to be software and vendor agnostic. Thus, for example, it is possible to select which package manager format to use (deb, rpm, or ipk). Within builds, there are options for various build-time sanity\/regression tests, and also the option to boot and test certain images under QEMU to validate the build. UDOO X86 Yocto image Download: core-image-sato-seco-64-udoo-logo.iso.bz2 SHA1: 47b370600a7b1e6f45c0f19bbd93bd29091a1ccb Installation To install Yocto on the eMMC of the UDOO X86 follow this steps: Heads up! In order not to risk to flash other drives we suggest to disconnect other storage devices connected. Download the image above on you PC Extract the iso from the .bz2 file using this command from the directory when you downloaded the file: bzip2 -d core-image-sato-seco-64-udoo-logo.iso.bz2 Note, that this command will not preserve original archive file. To preserve the original archive, add the -k option: bzip2 -dk core-image-sato-seco-64-udoo-logo.iso.bz2 Create a bootable USB installation drive as for the other Linux distributions following the guide Getting Started If the eMMC device is properly detected, the installation will ask if you want to install the image there, type Y and press Enter. Choose the percentage of swap on total drive size. You can type 0 and press Enter The installation should take about a minute. Heads up! If you want the fastest boot as possible, once the installation is complete we suggest to modify the file grub.cfg changing the timeout voice to 0 (10 seconds are set by default). Build From Source At the link below you can find the source used to compile this image, it is forked from the standard Yocto released by Intel\u00ae for the Bay Trail family processors. Download: meta-seco.7z SHA1: 90128847699C2EC7B3729F61E0B3D9EF9167EA5F Inside the package you can find a guide you can follow to compile the Yocto image.","tags":"","url":"Operating_Systems\/Yocto.html"},{"title":"LibreELEC with CEC support","text":"LibreELEC is a 'Just enough OS' Linux distribution for running Kodi. It is efficient with a tiny disk and memory footprint and provides cutting-edge hardware support to deliver a set-top box Kodi experience. Kodi is a free and open-source media player software application developed by the XBMC Foundation. LibreELEC is the best choice if you want to build your own set-top box device to connect to your TV. In this page we release a LibreELEC image that include the CEC and IR support for the UDOO X86 to exploit all the functionalities of the board as an HTPC. Heads up! At least the version 1.06 of the UEFI\/BIOS firmware of the UDOO X86 need to be installed to make the CEC and IR work properly. Visit the UEFI Update section to know how to update your board. Heads up! Enable IR functionality from the Setup Utility Menu of the UEFI\/BIOS Firmware The functionality is provided by a patched version of LibCEC. The Remote Control input activation is automatic and should work out-of-the-box. Download the image Stable Version Download the image here: LibreELEC with CEC support SHA256-SUM: cdd043591153436acb070a9649fdde8a53cd2eb906a0c25efe52448dcdf79e8f Last Commit: 161b7d7942392d8d4dc0a9503d35d13b4be1c303 This version of LibreELEC is the 9.1 with Linux kernel 5.1.16 (branch libreelec-9.2). Unstable Version Download the image here: LibreELEC with CEC support SHA256-SUM: 62fa5f67b0c483ebe93a80e376f2c09e78b4518df2bcba52a02f4ad9ce0a0cf2 Last Commit: 67a5bc8ff369b0aaabcc61b5e4bbb3bfc2ac2a8c This version of LibreELEC is the 9.80 with Linux kernel 5.1.15 (branch master). Old Version Download the image here: LibreELEC with CEC support SHA256-SUM: 6c06708a0b4b28ddaa8a1f918c25cc1defe8d9a6317d2e6859f9eb7a8850bc4e This version of LibreELEC is the 9.0 with Linux kernel 4.19 RC8. Compile To compile the image yourself, you just need to enable the CEC Framework and add the SECO_CEC support in the Kernel config. In order to do so, clone the forked repo using the following command. git clone https:\/\/github.com\/ektor5\/LibreELEC.tv It has already the edits you need for enabling the CEC. Then follow the official guide to compile the image here. Flash Once you have downloaded the image you need to create a bootable USB media. In the Getting Started section you can find a guide of how to install a Linux distro, the example is based on the Ubuntu OS. If you are an expert user and you want to do it in a fast way you can dd the image on a USB pendrive with the following command, substituting the correct image name and &quot;sdd&quot; with the correct device name: zcat &quot;path\/of\/the\/image.gz&quot; | dd of=\/dev\/sdd bs=4M status=progress Remove the USB pen when the process has finished. Installation Insert the USB pen and power up the board. Press ESC to enter the EFI menu and select Boot Manager, then select the USB pen. When booting you'll be standing in front of a terminal, type installer and Enter to install LibreELEC, otherwise type live and Enter for a Live session. Go through the installation wizard to install it permanently into the eMMC or another external drive. Enjoy the fast boot of LibreELEC.","tags":"","url":"Operating_Systems\/LibreELEC_with_CEC_support.html"},{"title":"Official Accessories","text":"In the UDOO Shop you can also find some accessories for the UDOO X86. M.2 Modules M.2 SSD Transcend MTS600 Buy it from the shop Capacity: 128GB\/256GB\/512GB Dimensions: 60.0mm \u00d7 22.0mm \u00d7 3.58mm (2.36&quot; x 0.87&quot; x 0.14&quot;) Weight: 6g (0.21 oz) Storage Media: MLC NAND Flash memory Operating Voltage: DC 3.3V\u00b15% Operating Temperature: 0\u00b0C (32\u00b0F) to 70\u00b0C (158\u00b0F) For more info about this SSD module you can check the official Transcend page To mount the SSD is necessary the following fixtures (not included with the item): 1x M3x12mm Flat Head Screw 1x 6mm Round Spacer 1x 0.5mm Washer 1x M3 Hex Bolt See the image below for mounting instructions. M.2 Wi-Fi Intel dual band ac Wi-Fi + BT 4.2 5GHz + adhesive antenna Buy it from the shop The package includes: Wi-Fi AC and Bluetooth 4.2 module Intel\u00ae Dual Band Wireless Wi-Fi AC and Bluetooth 4.2 module (AC3168) Dimensions: 4.9 x 3.5 x 0.4 inches Weight: 8.5g (0.3 oz) M.2 compatible RF micro coax type connector 2x Antennas IPEX MFH-4 connector 10cm IPEX cable Adhesive backing on aerial plates For more info about this WiFi\/BT module you can check the datasheet from the Intel website Heads up! Intel\u00ae Dual Band Wireless Wi-Fi AC and Bluetooth 4.2 module (Intel\u00ae AC3168) was released in 2016 so we suggest to use a recent distribution to find the latest drivers already installed. If you are using a Linux distribution you need at least the v4.6 of the Linux Kernel to make this module work properly. Heads up! You need both the antennas to make the module works properly. Connect an antenna to the Main A connector to enhance Wi-Fi signal. Connect an antenna to the Aux B connector to enhance Bluetooth and BluetoothLE signal. To mount the WiFi\/BT Kit is necessary the following fixtures (not included with the item): 1x M3x8mm Flat Head Screw 1x 2mm Round Spacer 1x 0.5mm Washer 1x M3 Hex Bolt See the image below for mounting instructions. M.2 dual Ethernet Module Kit Buy it from the shop This module is based on 2x Realtek 8111GS Ethernet controllers (fully compliant with IEEE 802.3, IEEE 802.3u, IEEE 802.3ab). When the M.2 dual Ethernet Module Kit accessory is plugged into M.2 Key B slot, the UDOO X86 board will offer three different Gigabit Ethernet ports. To mount the M.2 dual Ethernet Module Kit is necessary the following fixtures (not included with the item): 1x M3x12mm Flat Head Screw 1x 6mm Round Spacer 1x 0.5mm Washer 1x M3 Hex Bolt See the image below for mounting instructions. Mounting a M.2 accessory Check this images to know how to correctly mount M.2 accessories. Heads up! Screws, spacers and all other fixtures to mount the M.2 accessories are not included with the accessories items, but they are included when you buy any model of the UDOO X86 board. If you haven't the M.2 mounting kit arrived with the board you can buy it in the UDOO Shop: Screws and spacers kit for M.2 accessories mounting. Displays 7inch HDMI\/USB Display\/Touch Buy it from the shop The 7inch HDMI\/USB Display\/Touch has a 1024\u00d7600 pixel resolution and is supported by Windows 10\/8.1\/8\/7, Linux, and Android Operating System Display Features: 1024\u00d7600 high resolution; Resistive touch control; Compatible and Direct-connect with UDOO X86 with Windows 10\/8.1\/8\/7, Linux and Android operating system; Also works as a computer monitor, in this case, touch panel is unavailable and HDMI cable is required; HDMI interface for displaying, no I\/Os required (however, the touch panel still needs I\/Os); Multi-languages OSD menu, for power management, brightness adjustment, contrast adjustment, etc; Supports 100-level backlight adjustment. To use it just: 1- Turn On the \u201cbacklight\u201d switch on the back of the LCD; 2- Connect the Touch ports on your UDOO. The device will be recognized automatically; 3- Connect the HDMI port of the LCD to the HDMI port on your UDOO with an HDMI cable. Heads up! When multiple displays are detected by your UDOO, the LCD can only be used to control the cursor on main displays. So it is proposed to set the LCD as the main display. If you're looking for more info about this screen you can check the wiki page of the manufacturer: 7inch_HDMI_LCD_(C) Cases Metal Case Buy it from the shop A beautiful metal case for your UDOO X86 Board. Heads up! Please notice that the case does not dissipate heat, so you\u2019ll need the Fan Accessory if the temperature of the processor seems too high for the use you are doing of the board. Check here the mechanical drawing to see the dimensions of the case. UDOO X86 METAL CASE includes: 1x Metal Top Part; 1x Metal Bottom Part; 8x Pinout Header Extender; The case features also two holes, in the two sides, for connecting externally the WiFi and BT antennas of the M.2 module through a RP-SMA connector. For example you can use 2x IPEX MFH-4(W.FL) to RP-SMA cables and 2x RP-SMA antennas like in the following image. Heads up! These items are not included. Acrylic Case Buy it from the shop Top and Bottom plexiglass acrylic case for UDOO X86 Here you can download the cutting file of the acrylic enclosure. Cables and Others CPU fan for UDOO X86 heatsink Buy it from the shop You don\u2019t need a CPU fan for your ordinary activities, but the fan will help you out with complex projects that require a lot of power. The CPU fan is applied on the heatsink. It has 3 pins and you can set up thresholds inside the BIOS to automate it. It\u2019s pretty much plug-and-play. Dimensions: 2.9 cm height, 2.9 cm width, 1cm depth To mount the CPU fan is necessary the following fixtures (included with the shop item): 2x M3 self-tapping L16mm tip Cables and Power Supply HDMI to HDMI - HDMI A Male to A Male Cable 2MT: Supports Ethernet, 3D, 4K video and Audio Return Channel (ARC) MiniDP++ to HDMI - The miniDP++ to HDMI Passive Adapter lets you connect the UDOO X86 to a high definition (up to 1080p) monitors and projectors MiniDP++ to DP - The 2MT miniDP++ to DP Adapter lets you connect the UDOO X86 to a high definition (up to 4k) monitors and projectors SATA data and power cables for UDOO X86 - SATA data and power cables for UDOO X86 (CN18 and CN30 connectors) Power Supply EU 12V 3A for UDOO X86 - OUTPUT: 12V, 3A Jack Dimensions: (Inner diameter) 2.1mm - (Outer diameter) 5.5mm.","tags":"","url":"Hardware_Accessories\/Official_Accessories.html"},{"title":"GPIOs","text":"The GPIO (General-Purpose Input\/Output) peripheral provides dedicated general-purpose pins that can be configured as either inputs or outputs. When configured as an output, it is possible to write to an internal register to control the state driven on the output pin. When configured as an input, it is possible to detect the state of the input by reading the state of an internal register. In addition, the GPIO peripheral can produce CORE interrupts. UDOO X86 features a total of 36 GPIOs available on the external Pinout connectors. 16 GPIOs are available in the external Pinout columns manageable from the main Intel\u00ae Braswell processor of the UDOO X86. These Pins are 1.8V only compliant. 20 GPIOs are available in the internal Arduino Pinout columns manageable from the Intel\u00ae Curie\u2122 processor of the Arduino 101 embedded. These Pins are 3.3V compliant and 5V tollerant. Select the tab accordingly to which Processing Unit you want use to manage the related GPIOs. Curie&trade; GPIOs (Arduino 101) Braswell GPIOs Curie\u2122 GPIOs (Arduino 101) In the following image you can see in grey labels the 20 GPIOs manageable from the main Intel\u00ae Curie\u2122(Arduino 101-compatible embedded). Refer to the Arduino 101 (Intel Curie) section to manage the Arduino GPIOs. You will be able to use the internal row pinout exactly like you do with an Arduino 101. Braswell GPIOs In this section you can see how to use the 16 GPIOs manageable from the main Intel\u00ae Braswell processor of the UDOO X86. The Linux driver used to manage the UDOO X86 Braswell GPIOs is Cherryview\/Braswell pinctrl driver. Since the Linux Kernel version 4.15 the driver has changed the number associated to each GPIOs managable by the external pinout of the UDOO X86. Linux Kernel version 4.15 is the default one in Ubuntu 18.04 LTS distro. Chose the TAB accordingly with the Linux Kernel version are you using. Kernel 4.15 or higher Previous Kernel 4.15 In the following image you can see in grey labels the 16 GPIOs manageable from the main Intel\u00ae Braswell. Visit the Pinout Braswell section to see how to enable\/disable the GPIO function for these pins from the UEFI BIOS Setup of the UDOO X86. The GPIO function is enabled by default in the UEFI BIOS Setup configuration of the UDOO X86. Warning! Warning: UDOO X86 Pins controlled by the main Braswell processor are 1.8V only compliant. Providing higher voltages, like 3.3V or 5V, could irreversibly damage the board. In order to properly work with an input voltage different from 1.8V use a bidirectional level shifter. Take a look at this exhaustive guide How to use 1.8V serial on UDOO X86 with 3.3V-5V devices by Geduino Foundation to learn how to proper use a level shifter to work with a different voltage from 1.8V in the Braswell pinout. Linux Manipulation The Linux driver used to manage the UDOO X86 Braswell GPIOs is Cherryview\/Braswell pinctrl driver In the following tables you can find GPIO numbers assigned by the driver to each Pin that can act as GPIO. In the UDOO forum you can check the correct procedure to find the correct GPIO number assigned to each Pin explained in this post by fajar.adianto. PinHeader Connector CN13 Physical Pin Number GPIO NUMBER GPIO device name from the Linux Driver 24 275 \/sys\/class\/gpio\/gpio275 25 280 \/sys\/class\/gpio\/gpio280 26 273 \/sys\/class\/gpio\/gpio273 27 278 \/sys\/class\/gpio\/gpio278 28 276 \/sys\/class\/gpio\/gpio276 29 279 \/sys\/class\/gpio\/gpio279 30 307 \/sys\/class\/gpio\/gpio307 PinHeader Connector CN14 Physical Pin Number GPIO NUMBER GPIO device name from the Linux Driver 36 490 \/sys\/class\/gpio\/gpio490 37 492 \/sys\/class\/gpio\/gpio492 PinHeader Connector CN12 Physical Pin Number GPIO NUMBER GPIO device name from the Linux Driver 40 358 \/sys\/class\/gpio\/gpio358 41 243 \/sys\/class\/gpio\/gpio243 42 249 \/sys\/class\/gpio\/gpio249 43 246 \/sys\/class\/gpio\/gpio246 44 253 \/sys\/class\/gpio\/gpio253 45 250 \/sys\/class\/gpio\/gpio250 46 247 \/sys\/class\/gpio\/gpio247 For those users are still using a Linux Kernel version previous the 4.15 we are still maintaining here the old tables and images with the GPIOs numbers not updated. In the following image you can see in grey labels the 16 GPIOs manageable from the main Intel\u00ae Braswell. Visit the Pinout Braswell section to see how to enable\/disable the GPIO function for these pins from the UEFI BIOS Setup of the UDOO X86. The GPIO function is enabled by default in the UEFI BIOS Setup configuration of the UDOO X86. Warning! Warning: UDOO X86 Pins controlled by the main Braswell processor are 1.8V only compliant. Providing higher voltages, like 3.3V or 5V, could irreversibly damage the board. In order to properly work with an input voltage different from 1.8V use a bidirectional level shifter. Take a look at this exhaustive guide How to use 1.8V serial on UDOO X86 with 3.3V-5V devices by Geduino Foundation to learn how to proper use a level shifter to work with a different voltage from 1.8V in the Braswell pinout. Linux Manipulation The Linux driver used to manage the UDOO X86 Braswell GPIOs is Cherryview\/Braswell pinctrl driver In the following tables you can find GPIO numbers assigned by the driver to each Pin that can act as GPIO. PinHeader Connector CN13 Physical Pin Number GPIO NUMBER GPIO device name from the Linux Driver 24 346 \/sys\/class\/gpio\/gpio346 25 351 \/sys\/class\/gpio\/gpio351 26 344 \/sys\/class\/gpio\/gpio344 27 349 \/sys\/class\/gpio\/gpio349 28 347 \/sys\/class\/gpio\/gpio347 29 350 \/sys\/class\/gpio\/gpio350 30 366 \/sys\/class\/gpio\/gpio366 PinHeader Connector CN14 Physical Pin Number GPIO NUMBER GPIO device name from the Linux Driver 36 497 \/sys\/class\/gpio\/gpio497 37 499 \/sys\/class\/gpio\/gpio499 PinHeader Connector CN12 Physical Pin Number GPIO NUMBER GPIO device name from the Linux Driver 40 408 \/sys\/class\/gpio\/gpio408 41 326 \/sys\/class\/gpio\/gpio326 42 332 \/sys\/class\/gpio\/gpio332 43 329 \/sys\/class\/gpio\/gpio329 44 336 \/sys\/class\/gpio\/gpio336 45 333 \/sys\/class\/gpio\/gpio333 46 330 \/sys\/class\/gpio\/gpio330 Here you can find the Driver Documentation in the kernel that explain the use of the sysfs inferface. Export GPIOs In \/sys\/class\/gpio folder there are two files that allow you to export pins for access and unexport pins to remove access. \/sys\/class\/gpio\/export \/sys\/class\/gpio\/unexport To export a GPIO so that we can read, write and control the pin, we simply write the GPIO_NUMBER to the export file: echo GPIO_NUMBER &gt; \/sys\/class\/gpio\/export For example, to export GPIO 307: echo 307 &gt; \/sys\/class\/gpio\/export Once GPIO pin 307 is exported the following files (or links to files) are created in a new directory, gpio307. \/sys\/class\/gpio\/gpio307\/direction \/sys\/class\/gpio\/gpio307\/value A GPIO can be set in input or output configuration. In input means you can read the value of the voltage connected to the pins. In output means you can forces a pin to take a specific voltage. It is possible to switch a GPIO in input or output mode by writing either in or out to the direction file: # set gpio 307 to input echo in &gt; \/sys\/class\/gpio\/gpio307\/direction # set gpio 307 to output echo out &gt; \/sys\/class\/gpio\/gpio307\/direction To verify the voltage direction, just read the same file: cat \/sys\/class\/gpio\/gpio307\/direction Write values To write a low or high value on a GPIO, you need to write 0 or 1 in the value file: # set gpio 307 to low value - 0 volts echo 0 &gt; \/sys\/class\/gpio\/gpio307\/value # set gpio 307 to high value - 1.8 volts echo 1 &gt; \/sys\/class\/gpio\/gpio307\/value In order to set the value, the GPIO must be in the out direction. Read values If the direction is set to in, it is possible to read the GPIO value reading the same value file: cat \/sys\/class\/gpio\/gpio307\/value If the direction is set to out and you try to read the value, is not guaranteed that the value is coherent with the voltage found on the external pinout.","tags":"","url":"Hardware_Accessories\/GPIOs.html"},{"title":"Bricks snap in sensors","text":"Introduction UDOO BRICKS are modules you can use to augment your UDOO BOARDS and make them more versatile. Attach them into I2C Bricks snap-in connector with the related cable. UDOO BRICKS work along a cascade configuration, so you can attach them all together without wasting space in a truly intuitive way. Thanks to such configuration you can use cables up to 3,5 m long to connect UDOO BRICKS one another. In the UDOO X86 the I2C Bricks snap-in connector(CN24) is connected to the Intel\u00ae Curie\u2122 Processor (Arduino 101-compatible side). Heads up! The main Intel\u00ae Braswell processor cannot access the I2C Brick snap-in bus connector. To work in Linux, Windows or Android with the data from the UDOO BRICKS, you need to pass the data via the internal serial communication. You can use the Bricks modules exactly like I2C modules connected to the I2C bus of the Arduino 101 in SCL\/SDA Pins. I2C Bus support more devices simultaneously connected, so you can connect more than one brick to the the I2C Bricks snap-in connector(CN24) and connect other modules to the SCL\/SDA Pins at the same time. Light Brick - TSL2561T The LIGHT BRICK is a light sensor. It\u2019s based on the TSL2561T sensor. You can find documentation as datasheet, schematics, and montage plane in the Other Resurces page of our website, in the Accessories tab. Usage To use this sensor and calculate Lux, there's a lot of very hairy and unpleasant math, but you can simply use one of the compatible libraries available in the Library Manager of the Arduino IDE. Open the IDE and click to the Sketch menu and then Include Library &gt; Manage Libraries. In the Filter your search edit text type TSL2561. You can find these libraries available, all of them properly working: Adafruit TSL2561 (to use the Adafruit TSL2561 library you need to also install the Adafruit Sensor library from the .Zip file) SparkFun TSL2561 TSL2561 Arduino Library You can use the Example Sketch of each library to read Lux. The Brick Light Sensor I2C Address is set to 0x29, you need to modify the Arduino sketch accordingly to this info. Usually the address 0x29 is defined as TSL2561_ADDR_0 of TSL2561_ADDR_LOW.","tags":"","url":"Hardware_Accessories\/Bricks_snap_in_sensors.html"},{"title":"CEC-HDMI","text":"CEC Introduction Quoting from the Wikipedia page of the CEC: Consumer Electronics Control (CEC) is a feature of HDMI designed to allow users to command and control devices connected through HDMI by using only one remote control. For example by using the remote control of a television set to control a set-top box and or DVD player. Up to 15 devices can be controlled. CEC also allows for individual CEC-enabled devices to command and control each other without user intervention. UDOO X86\u2019s HDMI 1.4b supports CEC so we decided to develop the driver for the CEC of our board by adopting the new Linux standard CEC Framework. CEC Framework The Linux Kernel includes, since the 4.8 version, a standard HDMI-CEC framework to provide a unified kernel interface for use with HDMI-CEC hardware. Quoting from the official CEC framework documentation: The framework also gives the option to decide what to do in the kernel driver and what should be handled by userspace applications. In addition it integrates the remote control passthrough feature into the kernel\u2019s remote control framework. This new HDMI-CEC framework just acts like an API that allows manufacturers to easily write 'device drivers' that can talk to all different type of CEC hardware. The framework exposes CEC as a remote control input device allowing to any generic hardware to have standard syscalls to user-space application. With the new Linux kernels, most of the future hardware as well as the current ones, will be supported directly. This CEC Framework sets itself as a standard that will be adopted by all manufacturers to support CEC in their hardware and should be adopted by media applications soon. Here you can find details on the framework by the developer Hans Verkuil from Cisco. State of Art - libCEC libCEC is a well established user-space library. Many graphical media applications, like Kodi, use the libCEC platform in its own code to interact with CEC protocol. Now that a standard HDMI-CEC Framework is integrated into the Linux Kernel, future hardware will probably adopt it. LibCEC still has a pending Pull Request at the time of writing (2019\/07\/12) in order to add support for the Linux Framework. LibreELEC, a Linux distro for Kodi, has an option to add the patch and enabling the support, but it's not available in the official images. In the section LibreELEC with CEC support is possible to download a custom version with the CEC Support enabled. libCEC issue on github about adding the CEC Framework support - GitHub link. Kodi thread about using the CEC Framework alternatively to libCEC - KODI Forum thread. Compile and mount the seco-cec driver for UDOO X86 Use Heads up! Make sure you have installed an updated FW version (&gt;= 1.04) on your UDOO X86 (check this in BIOS Main Page). In order to use the driver, there are several methods: Install Linux Kernel version &gt; 5.0 with CONFIG_VIDEO_SECO_CEC and, optionally, CONFIG_VIDEO_SECO_RC (for IR) enabled Use DKMS (Dynamic Kernel Module System) Compile and mount the module manually Heads up! If you are compiling, make sure you have Linux kernel headers &gt;= 4.19 and CEC_NOTIFIER enabled (if you want to compile with headers &gt;= 4.14 you need to use version 0.1 ). DKMS DKMS is an automatic system for mounting and managing Linux external modules. It is really useful in case of a kernel update or for automounting the module at boot. # install dependencies (make, git, ecc..) sudo apt install git build-essential linux-headers-`uname -r` dkms # clone repo git clone https:\/\/github.com\/ektor5\/secocec # go to dir cd secocec # create dkms directory sudo mkdir '\/usr\/src\/secocec-1.0' # copy files sudo cp seco-cec.? dkms.conf Makefile '\/usr\/src\/secocec-1.0' # install module sudo dkms install secocec\/1.0 -k `uname -r` Now at reboot the module will be mounted automatically. Compile Install dependencies (make, git, ecc..) sudo apt install git build-essential linux-headers-`uname -r` Download the source code from git git clone https:\/\/github.com\/ektor5\/secocec.git Enter into the dir just downloaded: cd secocec compile the driver: make The module should appear as file called seco-cec.ko. Mount This module depends on the Linux CEC Framework Module, and it needs to be loaded first. modprobe cec Note: this module conflicts with the official SMBus driver i2c-i801 and therefore it needs to be blacklisted. On Ubuntu should be already blacklisted, if you're using echo &quot;blacklist i2c-i801&quot; &gt; \/etc\/modprobe.d\/i2c-i801.conf Load the module: insmod seco-cec.ko Done, the module is now loaded and working! How to use the driver with file system applications The CEC Framework expose all the CEC functionalities of the CEC protocol through a file system device \/dev\/cec0 so the applications can access directly this file. Since the CEC Framework is quite new there are still few applications that exploits all functions provided by the Framework. To test the device from userspace (\/dev\/cec0), there are some programs ready to use in v4l-utils tools package (available to install via apt): cec-ctl: An application to control cec devices cec-compliance: An application to verify remote CEC devices cec-follower: An application to emulate CEC followers You can check the official man pages for info. Install v4l-utils apt install v4l-utils Following you can find some examples. Register the CEC device (UDOO X86) in the CEC network using the physical and logical address: cec-ctl --phys-addr=2.0.0.0 \\ --playback Power on tv cec-ctl --active-source=phys-addr=2.0.0.0 --image-view-on -t0 Power off tv cec-ctl --standby -t0 Enable TV remote (it depends on manufacturers protocol) E.g. SimpLink by LG. cec-ctl --phys-addr=2.0.0.0 \\ --playback \\ --custom-command=cmd=0x89,payload=0x02:0x05 \\ --deck-status=deck-info=0x01 \\ --menu-status=menu-state=0x00 \\ --custom-command=cmd=0x89,payload=0x05:0x01 \\ --report-power-status=pwr-state=0 -t0 With this command the TV remote keys are interpreted by the OS as a standard keyboard and you can use it to interact with the OS applications like Kodi for examples. Edit keymaps Sometimes, not all the remote keys are set like we want it to be. E.g: the OK button is not understood as Enter by the X server input module (Xinput), so it is necessary to remap it. To edit the keymap do the following: Install ir-keytable package: apt install ir-keytable Get the current keytable: ir-keytable -r &gt; seco-cec-keytable.conf Edit the file with a text editor (e.g. vim): vim seco-cec-keytable.conf Rewrite it to the driver ir-keytable -w seco-cec-keytable.conf Done!","tags":"","url":"Hardware_Accessories\/CEC_HDMI.html"},{"title":"Consumer IR","text":"Introduction Quoting from the Wikipedia page of the Consumer IR: Consumer IR, consumer infrared, or CIR, refers to a wide variety of devices employing the infrared electromagnetic spectrum for wireless communications. Most commonly found in television remote controls, infrared ports are equally ubiquitous in consumer electronics, such as PDAs, laptops, and computers. The functionality of CIR is as broad as the consumer electronics that carry it. The IR receiver mounted on the board is controlled by the Embedded Controller (STM32) and it can receive and decode only RC-5 protocol signals. In this way it is possible to control your UDOO X86 with a simple remote control. Use The driver is developed only for Linux, and it is implemented inside the CEC-HDMI driver. Refer to the guide for installation. Heads up! Make sure you have installed an updated FW version (&gt;= 1.04) on your UDOO X86. When it is loaded, it will spawn an Remote Control Input device and it can be managed with the RC Framework and tools such as ir-keytable. Due to the lack of standardization in the Consumer IR remote controls, it will likely not be configured properly for your remote control. The procedure for configuration is the same as the CEC-HDMI RC Passthrough device Here is a fantastic guide from YaVDR about using ir-keytable and how configuring your RC device.","tags":"","url":"Hardware_Accessories\/Consumer_IR.html"},{"title":"Understanding Linux Software Management And Installing","text":"Overview Visit our Tutorials section to learn more about: Understanding Linux: Software Management And Installing. In this tutorial we'll take Ubuntu as example. Ubuntu, a linux based operating system, handles software management in a way you may not be used to. It is however, very convenient at the end of the day. Ubuntu features a repository system, which is a software collection stored on several servers, which you can access and install with few commands. This ensures that updating and installing software is easy, efficient and safe. To quote from Wikipedia: In software, a package management system, also called package manager, is a collection of software tools to automate the process of installing, upgrading, configuring, and removing software packages for a computer's operating system in a consistent manner. It typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites. Packages are distributions of software, applications and data. Packages also contain metadata, such as the software's name, description of its purpose, version number, vendor, checksum, and a list of dependencies necessary for the software to run properly. Upon installation, metadata is stored in a local package database. Ubuntu integrated software manager is a command-line tool called apt. Using it is very straight forwarding. Apt has it\u2019s own repository list, stored in \/etc\/apt\/sources.list You can add or remove software sources by editing this file. To see its content just type: cat \/etc\/apt\/sources.list It is however suggested to edit this only if you know what you are doing. Before attempting to install a software from a repository, let\u2019s update the apt cache. This is basically a database of all available software, that includes dependencies and version informations. To update: sudo apt update Then, let\u2019s assume we want to install nano, a very useful and simple text-editor: sudo apt install nano We will be asked if we wish to continue, let\u2019s reply yes. So, type y Apt will then download, unpack and install all file needed for us. Just wait a while and it will finish. Let\u2019s assume then, we want to remove a program, for example vim (another text-editor) sudo apt remove vim Again, we reply yes typing y. Some other useful commands for apt, and system housekeeping, are: apt autoremove removes automatically packages that are no longer required apt clean deleted downloaded packages that are wasting disk space We can now use another package manager, with a graphical user interface, Synaptic, which is the default package manager in most Ubuntu versions. We\u2019ll use apt to install synaptic apt install synaptic Once installed, we\u2019ll find Synaptic Package Manager in the \u201cOther\u201d applications menu. Let\u2019s open it. Type your root password, and enter. You can then, search and install every package you like, in a nice and user friendly environment. To start, we will enable more software sources than we have by default. To do this, go to settings then repositories and check all the repositories you wish to enable; typically you should be good enabling all software sources from the \u201cUbuntu Software\u201d tab. Once done, close and hit reload, which is the same as apt update. When finished, you can start searching and browsing for thousands of different softwares, to install them simply tick the checkbox, select Mark for installation and hit apply. You have now at your disposal all the software you need to further expand UDOO X86 capabilities","tags":"","url":"Cookbook_Linux\/Understanding_Linux_Software_Management_And_Installing.html"},{"title":"Linux Command Line Interface","text":"Overview Visit our Tutorials section to learn more about: Linux Command Line Interface. Linux Command Line Interface, (CLI from now on) could be at first glance discouraging for the average Joe, since nowadays we are only used to Graphic Interfaces. But don\u2019t let you down, using a command line shell could be, not only very useful, but also kind of funny. This Tutorial will help you move your first steps in the command shell environment. First, when a Command Line Interface could be useful for you? Remote Connection via SSH: SSH remote connection allows to interact with UDOO X86 without physical access to it. SSH is available only with command line interface. Using a minimal Linux Distribution without a graphical interface. Some Linux Distribution come without a Graphical User Interface, in order to maximize available resources. Command line interface is your only bet in this scenario Some power-users consider CLI the most convenient way to perform code execution and file-system operations. Even if you are not in this category, you may found out that CLI can be very fast when you get used to it. Showing up with your mates, the longest your CLI strings, the more rep you\u2019ll get. So, let\u2019s start this adventure with the very basic Linux commands: sudo Your first ally, allows users to run programs with the security privileges of root, or superuser.Its name is a concatenation of &quot;su&quot; (substitute user) and &quot;do&quot;, or take action . So, if you get an error message saying that \u201conly root can do that\u201d, just use the same command with preceeded by sudo. sudo In fewer words: sudo su This just enables root privileges once for all, without forcing you to type sudo everytime. It works until you close the shell you are working into. sudo su touch create an empty file touch nano open an handy text editor, to save and exit, press &quot;ctrl&quot; and &quot;x&quot;, and tell yes or no by pressing &quot;y&quot; or &quot;n&quot; nano cat cat shows the content of a file, it speeds up file inspection for smaller files. cat \/etc\/hostname ls Shows you the content of a folder ls cd opens a specific folder cd \/home cd ubuntu cd .. Brings you to a higher folder level cd \/home\/ubuntu cd .. # this goes to the \/home\/&lt;user&gt; folder cd \/ brings you to root (top filesystem level) cd \/ rm deletes a file rm myfile.my rm -rf deletes a folder rm -rf \/home\/ubuntu\/myfolder rm -rf myfolder mv moves a file or a folder. Useful for renaming also mv myfile \/myfolder\/myfile mv myfile mysecondfile cp copies a file cp myfile \/home\/ubuntu\/ cp -R copies a folder cp -R myfolder \/home\/ubuntu\/myfolder mkdir creates a folder mkdir myfolder top Top is a very useful utility, it basically gives you a complete overview of the system\u2019s status. It produces an ordered list of running processes selected by user-specified criteria. Top shows how much processing power and memory are being used, as well as other information about the running processes. top df -h Shows used and available disk space, in megabytes. df -h ifconfig -a Shows networking useful data, like current ip, netmasks and other statistics. ifconfig -a chmod chmod let you set files permissions. This utility is very important for people concerned about security, but it is useful also for coders, since you can set a script as executable with it . For a more comprehensive guide on how to use chmod see here dmesg Shows the messages resulting from the most recent system boot. It is useful for troubleshooting, since you can see which modules are loaded, which binaries are started and so on. dmesg sync Thanks to this command your SD card lifespan will drastically improve, remember to launch it every time you turn UDOO DUAL\/QUAD off, or remove the power. Completes all pending input\/output operations. It must be launched as root, or with sudo. sync reboot reboots the system reboot shutdown shuts it down shutdown now","tags":"","url":"Cookbook_Linux\/Linux_Command_Line_Interface.html"},{"title":"Intel Graphics update tool","text":"Intel\u00ae provides a tool to check and update the graphics drivers of the Intel\u00ae HD Graphics integrated GPU. Heads up! This tool is really useful to let your Linux Distro works well. For example, the latest Ubuntu 17.10 use Wayland as default display server and the standard i915 GPU driver doesn't manage properly Wayland as expected. We suggest to use the Intel\u00ae Graphics update tool for Linux to resolve lack graphical issues. You can follow this link to download the latest Intel\u00ae Graphics update tool for Linux. Whether running for the first time or upgrading from an earlier release, be sure to run the following. In order to &quot;trust&quot; the Intel\u00ae Graphics Update Tool for Linux* OS, you will need to add keys to Ubuntu's* software package manager (&quot;apt&quot;). Open a terminal, and execute these lines: wget https:\/\/download.01.org\/gfx\/RPM-GPG-GROUP-KEY-ilg sudo apt-key add RPM-GPG-GROUP-KEY-ilg In addition, also run the update and upgrade from Ubuntu* sudo apt-get update sudo apt-get upgrade After that you can install and run the tool to install the latest Intel\u00ae driver. Install the Intel\u00ae Graphics update tool in Ubuntu 17.10 Since the latest Intel\u00ae Graphics update tool for Linux* OS V2.0.6 is not available yet for Ubuntu 17.10, you need to use the 17.04 version and a little trick. Just change temporarily \/etc\/lsb-release to correspond to Ubuntu 17.04 Zesty Zapus, it will work fine. First, make a backup of the file: sudo cp \/etc\/lsb-release \/etc\/lsb-release.bk Then edit the file with your favourite text editor(e.g. nano for example): sudo nano \/etc\/lsb-release Replace contents with: DISTRIB_ID=Ubuntu DISTRIB_RELEASE=17.04 DISTRIB_CODENAME=zesty DISTRIB_DESCRIPTION=&quot;Ubuntu 17.04&quot; Save the file and now you can install the tool. When you are done installing the tool and the drivers, you can simply revert the changes: sudo rm -f \/etc\/lsb-release sudo cp \/etc\/lsb-release.bk \/etc\/lsb-release","tags":"","url":"Cookbook_Linux\/Intel_Graphics_update_tool.html"},{"title":"Play videos in GPU","text":"Hardware video acceleration To play video using the GPU (Intel HD Graphics) resources you need to use the Intel\u00ae Video Acceleration API (VA-API) and a software that exploits this specific API. VA-API is a specification and open source library to provide both hardware accelerated video encoding and decoding, developed by Intel. Without using VA-API all the encoding and decoding processes are in charge of the CPU. Verifying VA-API Verify the settings for VA-API by running vainfo. $ vainfo libva info: VA-API version 0.39.2 libva info: va_getDriverName() returns 0 libva info: Trying to open \/usr\/lib\/x86_64-linux-gnu\/dri\/i965_drv_video.so libva info: Found init function __vaDriverInit_0_39 libva info: va_openDriver() returns 0 vainfo: VA-API version: 0.39 (libva 1.7.1) vainfo: Driver version: Intel i965 driver for Intel(R) CherryView - 1.7.1 vainfo: Supported profile and entrypoints VAProfileMPEG2Simple : VAEntrypointVLD VAProfileMPEG2Simple : VAEntrypointEncSlice VAProfileMPEG2Main : VAEntrypointVLD VAProfileMPEG2Main : VAEntrypointEncSlice VAProfileH264ConstrainedBaseline: VAEntrypointVLD VAProfileH264ConstrainedBaseline: VAEntrypointEncSlice VAProfileH264Main : VAEntrypointVLD VAProfileH264Main : VAEntrypointEncSlice VAProfileH264High : VAEntrypointVLD VAProfileH264High : VAEntrypointEncSlice VAProfileH264MultiviewHigh : VAEntrypointVLD VAProfileH264MultiviewHigh : VAEntrypointEncSlice VAProfileH264StereoHigh : VAEntrypointVLD VAProfileH264StereoHigh : VAEntrypointEncSlice VAProfileVC1Simple : VAEntrypointVLD VAProfileVC1Main : VAEntrypointVLD VAProfileVC1Advanced : VAEntrypointVLD VAProfileNone : VAEntrypointVideoProc VAProfileJPEGBaseline : VAEntrypointVLD VAProfileJPEGBaseline : VAEntrypointEncPicture VAProfileVP8Version0_3 : VAEntrypointVLD VAProfileVP8Version0_3 : VAEntrypointEncSlice VAProfileHEVCMain : VAEntrypointVLD Play Videos with Hardware video acceleration You need to use a software that use VA-API. For example you can install GStreamer with the VA-API Plugin (gstreamer-vaapi). sudo apt install gstreamer1.0 gstreamer1.0-vaapi and play a video using gst-play-1.0 video.name In this way the video playing will exploits GPU and will not impact on the CPU load a lot. Reference For more info you can check this page Hardware_video_acceleration.","tags":"","url":"Cookbook_Linux\/Play_videos_in_GPU.html"},{"title":"Overview","text":"The UDOO X86 contains an embedded Intel Arduino 101, powered by Intel's Curie\u2122 module comprising of two cores operating simultaneously. The Intel\u00ae Quark SE\u2122 Core, a 32 MHz x86 processor, compatible with the Pentium x86 instruction set. Manages the USB interface (routed internally on the UDOO X86), and Bluetooth Low Energy. Contains 384 kB of on-die flash &amp; 80 kB of on-die SRAM. The ARC, a 32 MHz Argonaut RISC Core. This is where compiled Arduino Sketches are executed. The ARC can communicate directly with the six-axis accelerometer\/gyroscope. The memory subsystem is shared with the Quark SE\u2122, which also manages the communication between the two cores. Integrated device references Intel\u00ae Curie\u2122 Bosch BMI160 six-axis sensor nRF51822 Bluetooth Low Energy chip","tags":"","url":"Arduino_101_(Intel_Curie)\/Overview.html"},{"title":"Getting Started with Arduino 101","text":"To start programming the Arduino 101 (Intel\u00ae Curie\u2122) embedded microcontroller of the UDOO X86 you need the Arduino IDE or the Arduino Web IDE. You can refer the Getting Started with the Arduino\/Genuino 101 page of the Arduino website. This Arduino page will guide you through the installation of the IDE and the core board manager of the Arduino 101 other than everything you need to program the Arduino and use the pinout. Linux known issues Installation In some previous Arduino IDE version there was some installation issues, but now you can download the latest Arduino IDE version (at least Arduino IDE 1.8.3) and you should not find any Linux installation issue. Heads up! Remember to always keep updated you Arduino IDE installation. Check the page Install the Arduino Software (IDE) on Linux to have useful advice about the Linux installation. Upload Procedure Some Linux distributions need to be configured to gain upload permissions to the user. Usually you can do it with the command: sudo usermod -a -G dialout &lt;username&gt; Check the page Install the Arduino Software (IDE) on Linux to find more info about it. Inside the Arduino 101 core you can find a script to allow the user to use the serial device. Using the latest Arduino 101 core package v2.0.4 run the script with this commands: chmod +x ~\/.arduino15\/packages\/Intel\/hardware\/arc32\/2.0.4\/scripts\/create_dfu_udev_rule sudo ~\/.arduino15\/packages\/Intel\/hardware\/arc32\/2.0.4\/scripts\/create_dfu_udev_rule USB Devices The USB device where you can find the Arduino 101 (Intel\u00ae Curie\u2122) embedded may vary in accordance with the number of USB devices connected to the board. Usually, you should find the Arduino 101 in the COM3 in Windows 10 and \/dev\/ttyACM0 in Unix\/Linux OS. Check the Arduino page also for Tutorial, Curie\u2122 Libraries ad other useful information.","tags":"","url":"Arduino_101_(Intel_Curie)\/Getting_Started_with_Arduino_101.html"},{"title":"Pinout","text":"The embedded Arduino 101 input\/output (I\/O) pins operate at 3.3 V, with a maximum 20 mA DC current per pin. They are located on the inner columns of the dual headers. The I\/O voltage of 3.3 V is lower than the older Arduino UNO's 5 V. Keep this in mind when using shields and modules \u2013 Make sure you have set these accessories to operate at 3.3 V, which is typically performed by setting a jumper, a switch, or solder pad bridge (refer to the documentation of your shield\/module for details). The I\/O of the Arduino 101 is 5 V tolerant, therefore, if a shield\/module is incorrectly set to 5 V, you will fortunately not damage the Arduino. Be attentive when copying circuits from example diagrams that use a 5 V I\/O. Make sure to adjust for the lower I\/O voltage of the Arduino 101 where appropriate. This may include recalculating resisters using Ohm's Law for the components like LEDs. For guidance, please see the example project section of this documentation, or head to the UDOO forum to post any questions that you might have. All the digital pins can have interrupts attached - A significant increase over the two interrupt capable pins on the Arduino\u2122 UNO. An interrupt is an advantageous way of making code execute in response to abrupt input changes, for example, a rotary encoder being adjusted. There are six analog input pins at 10-bit resolution, providing a range of 1024 values between ground and 3.3 V. The number of inputs and resolution can be increased if required, by using an external ADC module. Analog output is simulated using pulse width modulation (PWM) on digital pins 3, 5, 6 and 9. For an explanation of PWM, refer to the following Arduino tutorial Arduino\u2122 Shields compatibility Here you can find a very useful document by Intel\u00ae regarding the compatibility of shields made for Arduino\u2122 with the Intel\u00ae Curie\u2122-based Arduino\u2122 101 board. Shield Testing Report for the Arduino 101* Board Heads up! As you can see from the image on top of the page the ICSP\/SPI connector proper of the Arduino\u2122 Pinout is moved to the bottom side of the UDOO X86 board. If you need to use a shield that communicates through this connector you need to connect the pins accordingly. UDOO BRICKs Snap-in The UDOO X86 features a BRICKs Snap-in connector to use UDOO BRICKs sensors connected to the Intel\u00ae Curie\u2122-based Arduino\u2122 101 side of the board. Check the Bricks snap-in sensors page to know how to use the sensors in Arduino\u2122 programming.","tags":"","url":"Arduino_101_(Intel_Curie)\/Pinout.html"},{"title":"Pattern Matching Engine","text":"The Intel\u00ae Curie\u2122 powered microcontroller contains 128 parallel Processing Elements (PE), useful for learning and recognising patterns without requiring the main CPU. This feature provides an energy efficient process of learning and responding to complex events. For further information and example code, refer to the Intel Open Source Technology Center repository on GitHub","tags":"","url":"Arduino_101_(Intel_Curie)\/Pattern_Matching_Engine.html"},{"title":"Braswell Power Management From Arduino 101","text":"The Arduino 101 side (Intel\u00ae Curie\u2122) of the UDOO X86 can take care of the Braswell power management. It can act as the Power Button(PWR) of the board connected directly to the Braswell processor. This means that an Arduino 101 sketch, that it's always running while the board is powered up, can for example turn on\/off the Braswell main processor or wake the OS from the suspend state. The Arduino 101 on board can wake up the Braswell processor depending on various triggers. For example, it can wake up the Braswell prcessor if the temperature, registered by a connected temperature sensor, increases over a certain threshold. Other examples of triggers may be a BLE signal or a movement tracked by the 6-axis motion sensor on board, defining features of Arduino 101. By exploiting the Arduino capabilities, you can set up the trigger you want to get the behaviour you expect from the system. The Arduino 101 (Intel\u00ae Curie\u2122) can trigger a power signal of the Braswell processor by producing a sequence of 5 low pulses in 100ms in the Arduino Pin 9 (IO9\/PWM3 signal in the schematics). Technically speaking the pulses are catched by a SMT32 microcontroller onboard(STM32F100R4H6) and propagated to the Braswell to wake it up or shut it down. You need to enable this feature of the UDOO X86 board in the UEFI Setup Utility(SCU). Heads up! This feature works correctly starting from the UEFI BIOS v1.03 so check to have your UDOO X86 updated. Note that the description in the menu item Curie Power Management is incorrect and will be updated with the next UEFI BIOS release. The correct sequence to be used to power-on\/power-off the Braswell processor is the one described in this page. You can find the Curie Power Management option in the menu Power: Power ... Curie Power Management &lt;Enabled&gt; Power On Intel Curie &lt;Enabled&gt; The option you can choose for the Curie Power Management are: &lt;Disabled&gt; = Intel Curie will never change the power status of the system &lt;Wake Only&gt; = Intel Curie only be able to wake the system from S3\/S4\/S5 &lt;Enabled&gt; = Intel Curie will be able to put the system in a lower power state(S3\/S4\/S5 depending on OS configuration) and wake it Examples BLE example In this blog post UDOO X86 Power On \/ Off via BLE on Arduino 101 you can find an example of an Arduino sketch that could be used to trigger a power signal from the Arduino 101 (Intel\u00ae Curie\u2122) via BLE. You don't need to connect other hardware and you can use your smartphone to trigger the power signal to the Braswell processor wirelessly. Button example Following an example of an Arduino sketch that could be used to trigger a power signal from the Arduino 101 (Intel\u00ae Curie\u2122) when a button is pressed: Circuit design Arduino sketch int reset_pin = 9; \/* Triggers the power signal *\/ int input_pin = 2; \/* Input Button connected. Set in pull down with a resistor *\/ int pulse_time = 8; volatile boolean power_pressed = false; void power_interrupt() { \/* When the button (connected to the Pin 2) is pressed, the attached interrupt runs this routine *\/ power_pressed = true; } void setup() { pinMode(reset_pin, OUTPUT); digitalWrite(reset_pin, HIGH); pinMode(input_pin, INPUT); attachInterrupt(digitalPinToInterrupt(input_pin), power_interrupt, RISING); } void loop() { if (power_pressed) { for(int i=0; i&lt;5; i++) { digitalWrite(reset_pin, LOW); delay(pulse_time); \/* Reset pin goes LOW for 8ms *\/ digitalWrite(reset_pin, HIGH); delay(pulse_time); \/* Reset pin goes HIGH for 8ms *\/ } power_pressed = false; } \/* Your main code goes in this loop, as before *\/ delay(10); }","tags":"","url":"Arduino_101_(Intel_Curie)\/Braswell_Power_Management_From_Arduino_101.html"},{"title":"Curie Reset on PowerON","text":"Arduino 101 (Intel\u00ae Curie\u2122) firmware doesn't manage correctly the USB serial communication during the reboot procedure, or after the suspend state resume of the computer which is connected to. Leaving the Arduino 101 connected to the PC (as for an embedded installation or as in the UDOO X86 setup), the Serial communication over USB (Arduino Serial Object) doesn't work properly at reboot or after suspend state resume. Both in Windows or Linux the COM or tty is shown at reboot, but it doesn't allow you to write data from PC to Arduino101 throught the Serial. In this case Arduino IDE freezes while trying to write data on Serial through Serial Monitor. Only a Master Reset resolves this issue. UDOO X86 solution To resolve this issue the UDOO X86 implements a hardware solution: The Braswell x86 main processor can internally act on the Master Reset signal of the Intel\u00ae Curie\u2122, resetting both the cores (Quark SE and ARC) in the Curie\u2122 SoC and restarting the sketch and the USB communication. This feature can be Enabled\/Disabled by the UEFI BIOS setup (SCU). You can find the Curie Reset on PowerON option in the menu Power: Power ... Curie Reset on PowerON &lt;Enabled&gt; If enabled the system will automatically reset the Intel Curie when the system is waking from a low power state (S3\/S4\/S5) By default this feature is enabled until the bug is fixed in the Intel's Arduino 101 firmware. This issue CDCSerial not available after PC reboot or resume from suspend is opened in the Intel's corelibs-arduino101 repository. You can Add your reaction to thumbs up \ud83d\udc4d(+1) the issue. Manage the possible loss of value of the variables Since this solution implemented in the UDOO X86 acts on the Master Reset signal of the Intel\u00ae Curie\u2122, the sketch is reset and restarted at reboot or after the suspend state resume of the Braswell processor. Therefore the sketch isn't erased but you will lose the value of the variables. To avoid this you can use the Arduino EEPROM library to permanently save the values of the variables. The Arduino 101 embedded has an emulated EEPROM space of 1024 bytes: memory whose values are kept when the board is turned off (like a tiny hard drive). For example you can simply store and get values using the methods EEPROM.put(eeAddress, f); and EEPROM.get(eeAddress, f); Check the Arduino EEPROM library page or the Intel EEPROM Library V2.0 for exhaustive references and examples.","tags":"","url":"Arduino_101_(Intel_Curie)\/Curie_Reset_on_PowerON.html"},{"title":"Serial Libraries","text":"UDOO X86 Serial Libraries Examples Serial Libraries Communication Samples for UDOO Board These example\u2019s scripts are meant to demonstrate how to implement a uni\\bidirectional communication between an Arduino sketch (running on the Arduino\u2122 101 Intel\u00ae Curie\u2122 embedded) and a binary application on the Braswell processor running Linux. The Arduino sketch will remain the same no matter which programming language you\u2019ll use to develop the binary on Linux. Heads up! The sources could be used also for Windows programs, however the libraries installation and compilation instructions aren't valid. There are two example scripts for each programming language: C, Java, PHP, Python. You can find the whole repo in our Github Channel. Clone the repo in your system and switch to proper udoo-x86 branch using these commands on a terminal: git clone https:\/\/github.com\/UDOOboard\/serial_libraries_examples.git cd serial_libraries_examples git checkout udoo-x86 Heads up! Make sure the user has the proper permission to read and write from the Arduino\u2122 101 serial device (\/dev\/ttyACM0 by default) Each program is meant to be executed while the matching Arduino Sketch is running on Arduino\u2122 101 Intel\u00ae Curie\u2122. Program the Arduino\u2122 embedded with the sketch named arduino_serial_example.ino before run these examples: c_serial_example.c java_serial_example.java php_serial_example.php python_serial_example.py Program the Arduino\u2122 embedded with the sketch named arduino_serial_example_bidirectional.ino before run these examples: c_serial_example_bidirectional.c java_serial_example_bidirectional.java php_serial_example_bidirectional.php python_serial_example_bidirectional.py Useful libraries to communicate with Arduino from a software on the Braswell processor Firmata The Firmata library implements the Firmata protocol for communicating with software on the host computer. This allows you to write custom firmware without having to create your own protocol and objects for the programming environment that you are using. You can check the Firmata documentation in the Arduino Reference page or the firmata wiki page. Here you find the Firmata firmware for Arduino. You can install the Firmata library directly from the Arduino IDE library manager.","tags":"","url":"Serial_Libraries\/index.html"},{"title":"Java Serial Libraries","text":"JAVA Serial libraries for UDOO NEO This file describes how to compile and run the Java examples contained in this folder. 1 - Flash the Arduino\u2122 Sketch using the Arduino IDE 1 - Install the OpenJDK Development Kit (JDK) (the headless version is good enough for this examples) and the javarxtx serial library. sudo apt install openjdk-8-jdk-headless librxtx-java 2 - Open a terminal and navigate to this folder: cd serial_libraries_examples\/java\/ 3 - Check if the Arduino 101 is assigned to the default port \/dev\/ttyACM0, otherwise modify this string in the .java sources with correct tty and save: UDOOserial.connect(&quot;\/dev\/ttyACM0&quot;); 4 - Compile the Java file: for Java_serial_example.java: javac -cp \/usr\/share\/java\/RXTXcomm.jar:. Java_serial_example.java for Java_serial_example_bidirectional.java: javac -cp \/usr\/share\/java\/RXTXcomm.jar:. Java_serial_example_bidirectional.java 5 - Run the Java program: for Java_serial_example.java: java -Djava.library.path=\/usr\/lib\/jni -cp \/usr\/share\/java\/RXTXcomm.jar:. Java_serial_example for Java_serial_example_bidirectional.java: java -Djava.library.path=\/usr\/lib\/jni -cp \/usr\/share\/java\/RXTXcomm.jar:. Java_serial_example_bidirectional","tags":"","url":"Serial_Libraries\/Java_Serial_Libraries.html"},{"title":"C Serial Libraries","text":"C Serial Libraries for UDOO NEO This file describes how to compile and run the C examples contained in this folder. 1 - Open a terminal and navigate to this folder: cd serial_libraries_examples\/c\/ 2 - Check if the Arduino 101 is assigned to the default port \/dev\/ttyACM0, otherwise modify this string in the .c sources with correct tty and save: define(&quot;PORT&quot;, &quot;\/dev\/ttyACM0&quot;); 3 - Compile the C file: for c_serial_example.c: gcc -o c_serial_example c_serial_example.c for c_serial_example_bidirectional.c: gcc -o c_serial_example_bidirectional c_serial_example_bidirectional.c 4 - Run the C program: for c_serial_example.c: .\/c_serial_example for c_serial_example_bidirectional.c: .\/c_serial_example_bidirectional","tags":"","url":"Serial_Libraries\/C_Serial_Libraries.html"},{"title":"PHP Serial Libraries","text":"PHP Serial Libraries for UDOO NEO This file describes how to run the PHP examples contained in this folder. To run these PHP examples, we will use the PHP interpreter and its embedded Web Server. The same examples can be executed over Apache or nginx too. 1 - Flash the Arduino\u2122 Sketch using the Arduino IDE 2 - Install the command-line interpreter for the PHP scripting language sudo apt install php7.0-cli 3 - Navigate in this folder: cd serial_libraries_examples\/php\/ 4 - Check if the Arduino 101 is assigned to the default port \/dev\/ttyACM0, otherwise modify this string in the .php sources with correct tty and save: define(&quot;PORT&quot;, &quot;\/dev\/ttyACM0&quot;); 5 - Start the embedded web server: php -S 0.0.0.0:8080 6 - Open a browser (on your UDOO or on your computer) and run the examples writing in the address bar: For the basic serial example: http:\/\/127.0.0.1:8080\/index.php For the bidirectional serial example: http:\/\/127.0.0.1:8080\/index_bidirectional.php Please note, use 127.0.0.1 if you open the browser directly on the UDOO; otherwise use 192.168.7.2 if you are using the USB Direct connection on UDOO NEO. If you want to connect from external WiFi\/Ethernet IP address are supported too.","tags":"","url":"Serial_Libraries\/PHP_Serial_Libraries.html"},{"title":"Python Serial Libraries","text":"Python serial libraries for UDOO X86 running Linux (tested with Ubuntu 16.04 LTS) This file describes how to run the python examples contained in this folder. 1 - Install the Python serial library from apt: sudo apt install python-serial 2 - Open a terminal and navigate to this folder: cd serial_libraries_examples\/python\/ 3 - Check if the Arduino 101 is assigned to the default port \/dev\/ttyACM0, otherwise modify this string in the .py sources with correct tty and save: ser = serial.Serial('\/dev\/ttyACM0', 115200,timeout=1) 4 - Run the python program: for the base python_serial_example.py: python python_serial_example.py for the bidirectional python_serial_example_bidirectional.py: python python_serial_example_bidirectional.py","tags":"","url":"Serial_Libraries\/Python_Serial_Libraries.html"},{"title":"UEFI update","text":"UDOO X86 is supplied with an InsydeH2O\u00ae UEFI BIOS. It is possible to access to InsydeH2O\u00ae Setup Utility by pressing the escape key (ESC) after System power up, during POST phase. UEFI Update utility At the following link you can find the latest UEFI Firmware and the UEFI Update Utility to quickly and easily updates flash devices with new UEFI Setup firmware. UEFI BIOS + and Update Utility The package contains: Latest UEFI Firmware binary Firmware name: 0B020000.106 BIOS version: 1.06 Release Date: 2020-08-17 SHA1 .zip file: 92ed05098594689c45638b3495e9783d87543357 Update Utility Tool DOS BIOS programming utility Windows 32-bit BIOS programmer Windows 64-bit BIOS programmer Linux 32-bit programmer Linux 64-bit programmer Update procedure documentation (.pdf) Follow the procedure in the APN - BIOS programming using H2OFFT_rel1.8.pdf file to update the UEFI BIOS firmware using DOS, Linux or Windows running on your UDOO X86. Heads up! Remember that update the UEFI firmware will revert the saved configuration to Factory Default. Please be aware that using Windows programmer, it must be run in a Prompt CMD shell with Administrator privileges. Using Linux programmer, gcc compiler and Kernel-headers are needed and every operation must be done with root\/administrator privileges. Linux versions used for the test: Ubuntu 16.04 - 16.10 - 17.04 - 18.04 Debian 8.5 Fedora 24 Opensuse 42","tags":"","url":"Advanced_Topics\/UEFI_update.html"},{"title":"EAPI","text":"EAPI (Embedded Application Programming Interface) is a framework developed by PICMG\u00ae for COM Express modules that gives a common API to unify software control for: System information Watchdog timer I2C Bus Flat Panel brightness control User storage area GPIO The EAPI definition is open to be used for other embedded form factors too, such as SBCs. Read the full specification here. Download here the official implementation for UDOO X86. The package contains: Latest precompiled EAPI Libraries Test application (with sources) OS compatibility: Windows 32-bit Windows 64-bit Linux 32-bit Linux 64-bit Revision version: 1.7 Release Date: 2018-11-19 SHA1 .zip file: 7d289faef2c40824f01dcdc5bff08dc32fbdd288 Official Documentation (.pdf)","tags":"","url":"Advanced_Topics\/EAPI.html"},{"title":"Overview","text":"BLOCK DIAGRAM FULL\u00a0SPECS\u00a0INTEL\u00a0BRASWELL\u00a0SOC Processor Intel\u00ae Braswell 64 bit 14 nm: Quad Core up to 2.56GHz Core 4 Memory DDR3L soldered-down memory up to 8GB RAM dual channel Graphics Intel HD Graphics Gen 8 LP Up to 700 MHz Up to 16 execution units Video Interfaces 1x HDMI 2x miniDP++ connectors Mass Storage eMMC disk up to 32 GB soldered on board Standard SATA connector M.2 Key B SSD slot Micro SD card slot Networking Gigabit Ethernet connector M.2 Key E slot for optional Wireless modules USB 3 x USB 3.0 type-A sockets Multimedia HW Video decode: H.265\/HEVC, H264, MPEG2, MVC, VC-1, WMV9, JPEG, VP8, VP9; HW Video encode: H.264, MVC, JPEG Audio Microphone + Headphone combo connector Speaker internal header S\/PDIF output Serial Ports 2x UART ports Other Interfaces IR interface (RC5 compatible) LPC - 2 x I2C - GPIOs -signals on expansion connector Digital I\/O Pins Up to 20 extended GPIOs, multiplexed with other interfaces Operating System Windows 10, 8.1, 7 64bit Any Linux Distribution for X86 64bit platform Android X86 Board Dimensions 120mm x85mm (4.72&quot; x 3.35&quot;) INTEL\u00a0CURIE\u00a0MICROCONTROLLER Processor Intel Quark SE core 32 MHz plus 32-bit ARC core 32 MHz Networking Bluetooth Low Energy Other Interfaces SPI Flash JTAG connector Arduino Pinout Arduino 101-Compatible and compatible with most Arduino Shields. Digital I\/O Pins 14 (PWM) Analog I\/O Pins 6 (10 Bits of resolution) Sensors 6-axis combo sensor with accelerometer and gyroscope Heads up! The communications between the Braswell SOC and the CurieTM SOC come through a USB interface, exactly like Arduino 101 \/ Genuino 101 boards connect to external PCs.","tags":"","url":"Hardware_Reference\/Overview.html"},{"title":"Resources","text":"UDOO X86 Hardware and UEFI BIOS User Manual For a complete explanation of the UDOO X86 hardware you can download the UDOO X86 Hardware and UEFI User Manual Schematics Here you can find the schematics files of the UDOO X86: Schematics Top Bottom Bill of Material (BOM) Here you can find the Bill of Materials(BOM) file of the UDOO X86: Bill of Material (BOM) Mechanical Specs - 3D Design Files Here you can find the mechanical specs files of the UDOO X86: UDOO X86 3D Design File Cutting file of the Acrylic Enclosure. Gerber Files","tags":"","url":"Hardware_Reference\/Resources.html"},{"title":"Board versions","text":"The main differences between the two versions of the UDOO X86 are shown in the following table. ULTRA ADVANCED PLUS Processor CPU INTEL PENTIUM N3710 up to 2.56 GHZ CPU INTEL CELERON N3160 up to 2.24 GHZ RAM 8 GB DDR3L DUAL CHANNEL 4 GB DDR3L DUAL CHANNEL Graphics INTEL HD GRAPHICS 405 UP TO 700 MHZ INTEL HD GRAPHICS 400 UP TO 640 MHZ Storage eMMC 32GB EMMC STORAGE 32GB EMMC STORAGE For a detailed comparison of the two processors follow this link: Ark Intel\u00ae processors comparison: N3710 and N3160","tags":"","url":"Hardware_Reference\/Board_versions.html"},{"title":"Video Output","text":"The Graphic controller of the UDOO X86 is the integrated Intel\u00ae HD Graphics. Depending of the UDOO X86 version this are the specification: Intel\u00ae HD Graphics 405 Up to 700 MHz 16 execution units (ULTRA version) Intel\u00ae HD Graphics 400 Up to 640 MHz 12 execution units (ADVANCED PLUS) Decoding\/Encoding specification formats HW decoding HEVC(H.265), H.264, MPEG2, MVC, VC-1, VP8, WMV9, JPEG\/MJPEG HW encoding H.264, MVC, JPEG\/MPEG Video Output Connectors The Intel\u00ae Braswell family of SoCs offer three Digital Display Interfaces, configurable to work in HDMI\/DVI\/DP++ modes. HDMI Connector On the UDOO x86 board, the Digital Display Interface #0 is used to implement a HDMI interface. HDMI featured by the Intel\u00ae Braswell processor is the version v1.4b. Maximum resolution: 3840x2160 @ 30Hz 2560x1600 @ 60Hz 24bpp Heads up! Always use HDMI-certified cables for the connection between the board and the HDMI display; a category 2 (High-Speed) cable is recommended for higher resolutions, category 1 cables can be used for 720p resolution. You can use this HDMI to HDMI cable to connect to a HDMI display in 4k resolution. MiniDisplay Port ++ Connectors On the UDOO x86 board, the Digital Display Interfaces #1 and #2 are used to implement a multimode Display Port (DP++) interface, i.e. it can be used to support DP displays directly and, through an external adapter, also HDMI or DVI displays. The configuration of this interface in DP or HDMI\/DVI mode is automatic. DP++ featured by the Intel\u00ae Braswell processor is the version v1.1a. Maximum resolution: 3840x2160 @ 30Hz 2560x1600 @ 60Hz 24bpp You can use this MiniDP++ to DP cable to connect to a DisplayPort display in 4k resolution. You can use this MiniDP++ to HDMI cable to connect to an HDMI display in FullHD resolution. To have 4k resolution from mDP to HDMI you need an active adapter. UDOO X86 Hardware and UEFI BIOS User Manual For a complete explanation of the UDOO X86 hardware you can download the UDOO X86 Hardware and UEFI User Manual","tags":"","url":"Hardware_Reference\/Video_Output.html"},{"title":"Storage Options","text":"eMMC onboard Depending on the chosen model of UDOO X86 you could have an embedded multi media card memory up to 32GB to install your favorite OS. The eMMC use a SD 3.0 compliant interface. Heads up! As a flash-based storage device, excessive drive access, particularly write commands, reduces its useful life. Therefore, it is strongly suggested to NOT create a swap partition on the eMMC device. S-ATA The N-series Intel\u00ae Pentium\u00ae \/ Celeron\u00ae and x5-Series Atom SoCs embed a SATA Controller, which offers two SATA III 6.0 Gbps interfaces. Of these interfaces, one SATA channel is carried out to a standard male S-ATA connector, CN18 (the other SATA channel is available on the M.2 Key B socket). A dedicated power connector (CN21), can be used to give supply to 2.5&quot; Hard Disk Drives (or Solid State Drives) connected to the SATA male connector. The dedicated power connector is a 4-pin male connector. You can find this cable in the SATA data and power cables for UDOO X86 kit. Heads up! To connect a 3.5&quot; Hard Drive you need to provide SATA +5V+12V combo power supply from an external source. \u03bcSD The SoCs used on UDOO x86 module offer a SD 3.0 compliant interface, that can be used to implement another mass storages media other than the optional internal eMMC and the two SATA interfaces. This SD interface is carried to a standard \u03bcSD card slot (CN17), soldered on top side of the module, push-push type. Heads up! Due to a UEFI BIOS bug you couldn't be able to write data on the \u03bcSD connected. A bugfix is already released in the latest official UEFI BIOS version (1.02). Make sure to keep updated the firmware of your UDOO X86 using the UEFI update procedure. M.2 SATA\/PCI-e Slot: Socket 2 Key B type 2242\/3042\/2260 The mass storage capabilities of the UDOO x86 are completed by an M.2 SSD Slot, which allow plugging M.2 Socket 2 Key B Solid State Drives with SATA interface or PCI-e x2 interface (PCI-e x1 is also supported). The connector used for the M.2 SATA\/PCI-e slot is CN20, which is a standard 75 pin M.2 Key B connector. On the UDOO x86 board there is also a Threaded Spacer which allows the placement of M.2 Socket 2 Key B SATA\/PCI-e modules in 2260 size. It is possible to place also modules in 2242 and 3042 size, by using a M\/F Spacer which allows fixing the M.2 module on the spacer already available on the PCB, deemed for the fixing of the M.2 Wireless module.","tags":"","url":"Hardware_Reference\/Storage_Options.html"},{"title":"M.2 Connectors","text":"UDOO X86 features two M.2 connectors on the bottom of the board. M.2 SATA\/PCI-e Slot: Socket 2 Key B type 2242\/3042\/2260 The mass storage capabilities of the UDOO X86 are completed by an M.2 SSD Slot, which allow plugging M.2 Socket 2 Key B Solid State Drives with SATA interface or PCI-e x2 interface (PCI-e x1 is also supported). The connector used for the M.2 SATA\/PCI-e slot is CN20, which is a standard 75 pin M.2 Key B connector, type LOTES p\/n APCI0087-P001A, H=8.5mm. On the UDOO X86 board there is also a Threaded Spacer which allows the placement of M.2 Socket 2 Key B SATA\/PCI-e modules in 2260 size. You can find officials M.2 SSD Transcend MTS600 in the UDOO Shop compatible with this connector. It is possible to place also modules in 2242 or 3042 size, by using a M\/F Spacer which allows fixing the M.2 module on the spacer already available on the PCB, deemed for the fixing of the M.2 Key E. The PCI-e x2 interface can be used also for different purposes other than SSD modules, but it is important that the CONFIG_1 signal is driven properly (it can be left unconnected on PCI-e based modules, due to the presence of the pull-up resistor on the platform). For example you can connect other accessories as the official M.2 dual Ethernet Module Kit or an adapter from M.2-to-PCI-e as used in this project to connect an external GPU. M.2 Connectivity Slot: Socket 1 Key E Type 2230 It is possible to increase the connectivity of the UDOO X86 board by using M.2 Socket 1 Key E connectivity modules (i.e. modules with functionalities like WiFi + Bluetooth). The connector used for the M.2 Connectivity slot is CN19, which is a standard 75 pin M.2 Key E connector, type LOTES p\/n APCI0076-P001A, H=4.2mm, with the pinout shown in the table on the left. On the UDOO X86 board there is also a Threaded Spacer which allows the placement of M.2 Socket 1 Key E connectivity modules in 2230 size. You can find the official M.2 Wi-Fi Intel dual band ac Wi-Fi + BT 4.2 5ghz + adhesive antenna in the UDOO Shop compatible with this connector.","tags":"","url":"Hardware_Reference\/M.2_Connectors.html"},{"title":"UEFI Firmware","text":"UDOO X86 is supplied with an InsydeH2O\u00ae UEFI Firmware, you can use it to setup of the board. If you are looking for how to update UEFI Firmware go to the UEFI update section. It is possible to access to InsydeH2O\u00ae Setup Utility by pressing the escape key (ESC) after System power up, during POST phase. Heads up! Some wireless or mechanical keyboards that doesn't respect the standard USB HID protocol could doesn't work in the UEFI BIOS Firmware menu. Regarding the wireless keyboards we tested these that are proper working also in the UEFI BIOS menu: Logitech k400r, Logitech k400 plus, Microsoft All-in-One Media Keyboard. Warning! Warning: Please do NOT \"play\" with the SCU menu choices if you don't know what you are doing. For example, if you disable USB ports or Video Outputs you will not be able to interact with the SCU to revert this condition. If you stumbling upon this case take a look at the **Restore Factory configuration** section below. UDOO X86 Hardware and UEFI BIOS User Manual For a complete explanation of the System Configuration Utility menu items you can download the exhaustive UDOO X86 Hardware and UEFI BIOS User Manual Setup Utility Menu The UEFI Firmware Setup Utility Menu show the following options: Heads up! Since some resolutions or monitors are not managed well by the firmware, if you get a black screen when you try to enter in one of the UEFI Firmware Setup Utility Menu options, try using another Display with a 1080 resolution (HDMI or DisplayPort) or a different cable. Continue: The Boot continue with the configured boot option. Boot Manager: Here you can choose the device to boot from \u2013 eMMC, Micro SD, SATA drive, USBdisk, LAN, or other supported boot device. Device Manager: Boot From File: Secure Boot Option: SCU: The System Configuration Utility is where you can configure basic system settings like the date and time, to advanced features like the security configuration. You can also set your preferred power options, for example, making sure the computer turns back on after a loss of power, useful if the board is located remotely. Restore Factory configuration You can restore the factory default settings from the SCU pressing the F9 key. You can also restore the factory UEFI BIOS configuration with a simple procedure involving the RTC battery: when the board is NOT connected to any power source, unplug the RTC battery on the bottom side of the board and keep it unplugged for at least 1 minute. Plug the RTC battery again and power up the board, all the configurations should now be reverted to the factory defaults. Updating the UEFI BIOS to a newer version will also restore the new factory default configuration. Heads up! You can use the RTC battery procedure starting from the UEFI BIOS v1.03 so check to have your UDOO X86 updated. If you cannot use the precedents methods take a look at this useful threads of Jetguy in the UDOO Forum.","tags":"","url":"Hardware_Reference\/UEFI_Firmware.html"},{"title":"Pinout Braswell","text":"The external row Pinout headers (Pins from 16 to 47) are connected to the Intel\u00ae Braswell x86 Processor of the UDOO X86. Warning! Warning: UDOO X86 Pins controlled by the main Braswell processor are 1.8V only compliant. Providing higher voltages, like 3.3V or 5V, could irreversibly damage the board. In order to properly work with an input voltage different from 1.8V use a bidirectional level shifter. Take a look at this exhaustive guide How to use 1.8V serial on UDOO X86 with 3.3V-5V devices by Geduino Foundation to learn how to proper use a level shifter to work with a different voltage from 1.8V in the Braswell pinout. Pinmuxing The image below shows the list of all possible functions assigned to each Pin. UART 1 and UART 2 Universal Asynchronous Receiver\/Transmitter (UART) provides serial communication capability with external devices through a level converter and an RS-232 cable or through the use of external circuitry that converts infrared signals to electrical signals (for reception) or transforms electrical signals to signals that drive an infrared LED (for transmission) in order to provide low speed IrDA compatibility. The UART 1 is available at Pins 16, 17, 18, 19. The UART 2 is available at Pins 20, 21, 22, 23. Both these serials are High-Speed UART (HSUART). Accordingly to the Braswell datasheet the baud rate goes from 300 to 3686400. HSUART 1 Pin Function Processor PAD 16 UART1_RTS UART1_RTS_B 17 UART1_CTS UART1_CTS_B 18 UART1_TXD UART1_TXD 19 UART1_RXD UART1_RXD HSUART 2 Pin Function Processor PAD 20 UART2_RTS UART2_RTS_N 21 UART2_CTS UART2_CTS_N 22 UART2_TXD UART2_TXD 23 UART2_RXD UART2_RXD These Pins can't work as GPIOs. These two HSUART buses are enabled by default. You can Enable\/Disable the UART 1 and UART 2 from the UEFI BIOS Setup by changing the configuration set in the section: Advanced --&gt; Chipset configuration --&gt; LPSS &amp; SCC Configuration LPSS Configuration DMA #1 Support &lt;Enabled (ACPI)&gt; HSUART #1 &lt;Enabled (ACPI)&gt; HSUART #2 &lt;Enabled (ACPI)&gt; Use the UART in Linux The UART 1 and UART 2 are shown respectively as \/dev\/ttyS4 and \/dev\/ttyS5 when configured as HSUART mode(default configuration). If you can't find this two serial in Linux, you probably need to disable the Virtual COM option in the BIOS menu (Can be changed only when HSUART #1 and HSUART #2 are Enabled). If Disabled, the Virtual COM won't be added to the ACPI table. The UART 1 and UART 2 are shown respectively as \/dev\/tty0 and \/dev\/tty1 when configured in Legacy mode. Use the UART in Windows 10 To use the UARTs in Windows, after enabling them in BIOS Setup, you need to download the corresponding drivers. Download and install the Intel Serial IO Driver. Then download the specific HSUART driver for UDOO X86. Verify the presence of Unknown Device with Device ID as ACPI\\VCOM000x or ACPI\\INT351x in Windows Device Manager. Extract the archive file, press mouse right-button on x64\\UartSample.inf \/ x86\\UartSample.inf (depending on the OS architecture) and select Install. On Device Manager, one or more UartSample Device devices will appear under &quot;Port (COM &amp; LPT)&quot; section. Now the devices are ready and they can be used with a HSUART Virtual Serial Terminal like extraPuTTY. LPC bus LPC bus is a computer bus used to connect low-bandwidth devices such as serial and parallel ports, PS\/2 etc. Quoting the Wikipedia LPC page: The Low Pin Count bus, or LPC bus, is a computer bus used on IBM-compatible personal computers to connect low-bandwidth devices to the CPU, such as the boot ROM, &quot;legacy&quot; I\/O devices (integrated into a super I\/O chip), and Trusted Platform Module (TPM).[2] &quot;Legacy&quot; I\/O devices usually include serial and parallel ports, PS\/2 keyboard, PS\/2 mouse, and floppy disk controller. The LPC bus is available at Pins 24, 25, 26, 27, 28, 29, 30. This Pins can also work as GPIOs if the LPC bus function is disabled in the UEFI BIOS Setup. Pin Function Processor PAD GPIO device name from the Linux Driver 24 LPC_AD0 MF_LPC_AD0 gpio346 25 LPC_AD1 MF_LPC_AD1 gpio351 26 LPC_AD2 MF_LPC_AD2 gpio344 27 LPC_AD3 MF_LPC_AD3 gpio349 28 LPC_FRAME LPC_FRAME_N gpio347 29 LPC_CLK MF_LPC_CLKOUT0 gpio350 30 LPC_SERIRQ ILB_SERIRQ gpio366 The LPC bus is disabled by default, so you can use these pins as GPIOs. You can Enable\/Disable the LPC bus from the UEFI BIOS Setup by changing the configuration set in the section: Advanced --&gt; Chipset configuration --&gt; Miscellaneous Configuration LPC Support &lt;Disabled&gt; BUF_PLTRST This is a power sequencing signal. This is used to report that the UDOO X86 is actually turned on and to get off from the reset state all the connected peripherals. For example, if you connect to the board a new peripheral that supports reset state you can connect this Pin to the new peripheral reset pin. This way the new peripheral will be in reset when the board is in a deep suspend state (S3\/S4\/S5) and out of the reset state when the UDOO X86 is actually turned on, with a considerable power saving. Pin Function Processor PAD 31 PLTRST PMU_PLTRST_N This Pin can't work as GPIO. I2C 1 and I2C 2 The I2C (Inter-IC) bus is a bi-directional, two-wire serial bus that provides a communication link between integrated circuits (ICs). Phillips introduced the I2C bus 20 years ago for mass-produced items such as televisions, VCRs, and audio equipment. Today, I2C is the de-facto solution for embedded applications. The I2C 1 is available at Pins 34, 35. The I2C 2 is available at Pins 38, 39. I2C1 Pin Function Processor PAD 34 I2C1_SCL I2C0_SCL 35 I2C1_SDA I2C0_SCL I2C2 Pin Function Processor PAD 38 I2C2_SCL I2C5_SCL 39 I2C2_SDA I2C5_SCL These Pins can't work as GPIOs. These two I2C buses are enabled by default. You can Enable\/Disable the I2C 1 and I2C 2 from the UEFI BIOS Setup by changing the configuration set in the section: Advanced --&gt; Chipset configuration --&gt; LPSS &amp; SCC Configuration LPSS Configuration ... DMA #2 Support &lt;Enabled (ACPI)&gt; I2C #1 - CN14 pin10\/12 &lt;Enabled (ACPI)&gt; I2C #2 - CN14 pin2\/4 &lt;Enabled (ACPI)&gt; GPIOs pins The Pins headers 36, 37, 40, 41, 42, 43, 44, 45, 46 can work as GPIOs only. The GPIO function is enabled by default for these Pins. Pin Function Processor PAD GPIO device name from the Linux Driver 36 GPIO SATA_GP2 gpio499 37 GPIO SATA_GP1 gpio497 40 GPIO GPIO_SUS3 gpio408 41 GPIO SDMMC2_D3_CD_N gpio326 42 GPIO SDMMC2_D2 gpio332 43 GPIO SDMMC2_D1 gpio329 44 GPIO SDMMC2_D0 gpio336 45 GPIO SDMMC2_CMD gpio333 46 GPIO SDMMC2_CLK gpio330 S\/PDIF S\/PDIF (Sony\/Philips Digital Interface Format) is a type of digital audio interconnect used in consumer audio equipment to output audio over reasonably short distances. The signal is transmitted over either a coaxial cable with RCA connectors or a fibre optic cable with TOSLINK connectors. S\/PDIF interconnects components in home theatres and other digital high-fidelity systems. The S\/PDIF Output bus is available at Pin 47. Pin Function Processor PAD 47 SPDIF_OUT AUDIO CODEC This Pin can't work as GPIO. To use the S\/PDIF bus you need to install a connector type TOSLINK or RCA. The following is an example of a TOSLINK connector schematic:","tags":"","url":"Hardware_Reference\/Pinout_Braswell.html"},{"title":"Recognize the UDOO X86 revision","text":"A new revision of the UDOO X86 board has been released called UDOO X86 II. There are two UDOO X86 revision: UDOO X86 - with Arduino101-compatible microcontroller Intel\u00ae Curie\u2122 - hardware revision from D to H UDOO X86 II - with Arduino Leonardo-compatible microcontroller ATmega32U4 - hardware revision I How to recognize the UDOO X86 board revision The hardware revision is written in the bottom of the board. Check the image below: If the board in your hands has a hardware revision from D to H you are consulting the right documentation. If the board in your hands has hardware revision I as in the photo please refer to the UDOO X86 II Doc at this page.","tags":"","url":"Hardware_Reference\/Recognize_the_UDOO_X86_revision.html"}]}